//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 18 colors.
  struct color {
    /// Color `ColorCell`.
    static let colorCell = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorCell")
    /// Color `colorAppPrimary`.
    static let colorAppPrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorAppPrimary")
    /// Color `colorApproved`.
    static let colorApproved = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorApproved")
    /// Color `colorBorder`.
    static let colorBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorBorder")
    /// Color `colorCreateCourse`.
    static let colorCreateCourse = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorCreateCourse")
    /// Color `colorDrafts`.
    static let colorDrafts = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorDrafts")
    /// Color `colorHeadingsBorder`.
    static let colorHeadingsBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorHeadingsBorder")
    /// Color `colorHeadings`.
    static let colorHeadings = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorHeadings")
    /// Color `colorLink`.
    static let colorLink = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorLink")
    /// Color `colorPlaceHolder`.
    static let colorPlaceHolder = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorPlaceHolder")
    /// Color `colorScreenBg1`.
    static let colorScreenBg1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorScreenBg1")
    /// Color `colorScreenBg`.
    static let colorScreenBg = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorScreenBg")
    /// Color `colorText`.
    static let colorText = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorText")
    /// Color `colorThemeBorder`.
    static let colorThemeBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorThemeBorder")
    /// Color `colorThemeHeadings`.
    static let colorThemeHeadings = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorThemeHeadings")
    /// Color `colorTheme`.
    static let colorTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorTheme")
    /// Color `colorToggle`.
    static let colorToggle = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorToggle")
    /// Color `colorViewBg`.
    static let colorViewBg = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorViewBg")
    
    /// `UIColor(named: "ColorCell", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorCell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorCell, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorAppPrimary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorAppPrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorAppPrimary, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorApproved", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorApproved(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorApproved, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorBorder, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorCreateCourse", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorCreateCourse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorCreateCourse, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorDrafts", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorDrafts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorDrafts, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorHeadings", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorHeadings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorHeadings, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorHeadingsBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorHeadingsBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorHeadingsBorder, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorLink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorLink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorLink, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorPlaceHolder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorPlaceHolder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorPlaceHolder, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorScreenBg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorScreenBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorScreenBg, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorScreenBg1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorScreenBg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorScreenBg1, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorText, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorTheme, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorThemeBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorThemeBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorThemeBorder, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorThemeHeadings", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorThemeHeadings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorThemeHeadings, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorToggle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorToggle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorToggle, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "colorViewBg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorViewBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorViewBg, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `Default-568h@2x.png`.
    static let default568h2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Default-568h@2x", pathExtension: "png")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "Default-568h@2x", withExtension: "png")`
    static func default568h2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.default568h2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 12 fonts.
  struct font: Rswift.Validatable {
    /// Font `Roboto-BlackItalic`.
    static let robotoBlackItalic = Rswift.FontResource(fontName: "Roboto-BlackItalic")
    /// Font `Roboto-Black`.
    static let robotoBlack = Rswift.FontResource(fontName: "Roboto-Black")
    /// Font `Roboto-BoldItalic`.
    static let robotoBoldItalic = Rswift.FontResource(fontName: "Roboto-BoldItalic")
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Italic`.
    static let robotoItalic = Rswift.FontResource(fontName: "Roboto-Italic")
    /// Font `Roboto-LightItalic`.
    static let robotoLightItalic = Rswift.FontResource(fontName: "Roboto-LightItalic")
    /// Font `Roboto-Light`.
    static let robotoLight = Rswift.FontResource(fontName: "Roboto-Light")
    /// Font `Roboto-MediumItalic`.
    static let robotoMediumItalic = Rswift.FontResource(fontName: "Roboto-MediumItalic")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")
    /// Font `Roboto-ThinItalic`.
    static let robotoThinItalic = Rswift.FontResource(fontName: "Roboto-ThinItalic")
    /// Font `Roboto-Thin`.
    static let robotoThin = Rswift.FontResource(fontName: "Roboto-Thin")
    
    /// `UIFont(name: "Roboto-Black", size: ...)`
    static func robotoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlack, size: size)
    }
    
    /// `UIFont(name: "Roboto-BlackItalic", size: ...)`
    static func robotoBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlackItalic, size: size)
    }
    
    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }
    
    /// `UIFont(name: "Roboto-BoldItalic", size: ...)`
    static func robotoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Roboto-Italic", size: ...)`
    static func robotoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoItalic, size: size)
    }
    
    /// `UIFont(name: "Roboto-Light", size: ...)`
    static func robotoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLight, size: size)
    }
    
    /// `UIFont(name: "Roboto-LightItalic", size: ...)`
    static func robotoLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLightItalic, size: size)
    }
    
    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }
    
    /// `UIFont(name: "Roboto-MediumItalic", size: ...)`
    static func robotoMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMediumItalic, size: size)
    }
    
    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }
    
    /// `UIFont(name: "Roboto-Thin", size: ...)`
    static func robotoThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThin, size: size)
    }
    
    /// `UIFont(name: "Roboto-ThinItalic", size: ...)`
    static func robotoThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThinItalic, size: size)
    }
    
    static func validate() throws {
      if R.font.robotoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Black' could not be loaded, is 'Roboto-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BlackItalic' could not be loaded, is 'Roboto-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BoldItalic' could not be loaded, is 'Roboto-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Italic' could not be loaded, is 'Roboto-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Light' could not be loaded, is 'Roboto-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-LightItalic' could not be loaded, is 'Roboto-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-MediumItalic' could not be loaded, is 'Roboto-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Thin' could not be loaded, is 'Roboto-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-ThinItalic' could not be loaded, is 'Roboto-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 151 images.
  struct image {
    /// Image `Default-568h`.
    static let default568h = Rswift.ImageResource(bundle: R.hostingBundle, name: "Default-568h")
    /// Image `Inst_ic_course`.
    static let inst_ic_course = Rswift.ImageResource(bundle: R.hostingBundle, name: "Inst_ic_course")
    /// Image `chevron left`.
    static let chevronLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevron left")
    /// Image `chevron right`.
    static let chevronRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevron right")
    /// Image `ic_All_course`.
    static let ic_All_course = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_All_course")
    /// Image `ic_achive_outline`.
    static let ic_achive_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_achive_outline")
    /// Image `ic_add_btn_outline`.
    static let ic_add_btn_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_btn_outline")
    /// Image `ic_add_calendar`.
    static let ic_add_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_calendar")
    /// Image `ic_add_lactur`.
    static let ic_add_lactur = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_lactur")
    /// Image `ic_add_quiz`.
    static let ic_add_quiz = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_quiz")
    /// Image `ic_add`.
    static let ic_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add")
    /// Image `ic_approved_courses`.
    static let ic_approved_courses = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_approved_courses")
    /// Image `ic_audio_off`.
    static let ic_audio_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_audio_off")
    /// Image `ic_audio_on`.
    static let ic_audio_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_audio_on")
    /// Image `ic_back_btn_wt`.
    static let ic_back_btn_wt = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_btn_wt")
    /// Image `ic_backward`.
    static let ic_backward = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_backward")
    /// Image `ic_bookmark_dark_outline`.
    static let ic_bookmark_dark_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bookmark_dark_outline")
    /// Image `ic_bookmark_on`.
    static let ic_bookmark_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bookmark_on")
    /// Image `ic_bookmark_outline`.
    static let ic_bookmark_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bookmark_outline")
    /// Image `ic_calendar`.
    static let ic_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calendar")
    /// Image `ic_calender_view`.
    static let ic_calender_view = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calender_view")
    /// Image `ic_camera_placeholder`.
    static let ic_camera_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera_placeholder")
    /// Image `ic_camera`.
    static let ic_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera")
    /// Image `ic_captions`.
    static let ic_captions = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_captions")
    /// Image `ic_certificate_document`.
    static let ic_certificate_document = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_certificate_document")
    /// Image `ic_certificate_final`.
    static let ic_certificate_final = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_certificate_final")
    /// Image `ic_chaked`.
    static let ic_chaked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chaked")
    /// Image `ic_check_filled`.
    static let ic_check_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_filled")
    /// Image `ic_check_unfilled`.
    static let ic_check_unfilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_unfilled")
    /// Image `ic_check`.
    static let ic_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check")
    /// Image `ic_checkbox_on_s`.
    static let ic_checkbox_on_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkbox_on_s")
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
    /// Image `ic_collaps_arrow`.
    static let ic_collaps_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_collaps_arrow")
    /// Image `ic_collaps_off`.
    static let ic_collaps_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_collaps_off")
    /// Image `ic_collaps_on`.
    static let ic_collaps_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_collaps_on")
    /// Image `ic_communication`.
    static let ic_communication = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_communication")
    /// Image `ic_completed_outline`.
    static let ic_completed_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_completed_outline")
    /// Image `ic_course_category`.
    static let ic_course_category = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_course_category")
    /// Image `ic_course_complete`.
    static let ic_course_complete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_course_complete")
    /// Image `ic_course_completed`.
    static let ic_course_completed = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_course_completed")
    /// Image `ic_course_profile`.
    static let ic_course_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_course_profile")
    /// Image `ic_course`.
    static let ic_course = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_course")
    /// Image `ic_create_course`.
    static let ic_create_course = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_create_course")
    /// Image `ic_cross`.
    static let ic_cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cross")
    /// Image `ic_dd_small_blue`.
    static let ic_dd_small_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dd_small_blue")
    /// Image `ic_dislike`.
    static let ic_dislike = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dislike")
    /// Image `ic_doc_off`.
    static let ic_doc_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_doc_off")
    /// Image `ic_doc_on`.
    static let ic_doc_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_doc_on")
    /// Image `ic_download`.
    static let ic_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_download")
    /// Image `ic_draft_courses`.
    static let ic_draft_courses = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_draft_courses")
    /// Image `ic_dropdown_arrow`.
    static let ic_dropdown_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dropdown_arrow")
    /// Image `ic_earn`.
    static let ic_earn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_earn")
    /// Image `ic_enrolled`.
    static let ic_enrolled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_enrolled")
    /// Image `ic_event_calender`.
    static let ic_event_calender = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_event_calender")
    /// Image `ic_explore_0`.
    static let ic_explore_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_explore_0")
    /// Image `ic_explore_1`.
    static let ic_explore_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_explore_1")
    /// Image `ic_filter-dark`.
    static let ic_filterDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_filter-dark")
    /// Image `ic_filter_white`.
    static let ic_filter_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_filter_white")
    /// Image `ic_forward`.
    static let ic_forward = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_forward")
    /// Image `ic_full_screen`.
    static let ic_full_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_full_screen")
    /// Image `ic_golive`.
    static let ic_golive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_golive")
    /// Image `ic_google`.
    static let ic_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_google")
    /// Image `ic_graphic_category`.
    static let ic_graphic_category = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_graphic_category")
    /// Image `ic_green_winning_cup`.
    static let ic_green_winning_cup = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_green_winning_cup")
    /// Image `ic_heart_dark_outline`.
    static let ic_heart_dark_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_heart_dark_outline")
    /// Image `ic_heart_outline`.
    static let ic_heart_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_heart_outline")
    /// Image `ic_image_placeholder`.
    static let ic_image_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_image_placeholder")
    /// Image `ic_infographic_type`.
    static let ic_infographic_type = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_infographic_type")
    /// Image `ic_land_bg`.
    static let ic_land_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_land_bg")
    /// Image `ic_language_details`.
    static let ic_language_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_language_details")
    /// Image `ic_language_select`.
    static let ic_language_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_language_select")
    /// Image `ic_library`.
    static let ic_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_library")
    /// Image `ic_like_off`.
    static let ic_like_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_like_off")
    /// Image `ic_line_off`.
    static let ic_line_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_line_off")
    /// Image `ic_line_on`.
    static let ic_line_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_line_on")
    /// Image `ic_link`.
    static let ic_link = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_link")
    /// Image `ic_linkedin`.
    static let ic_linkedin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_linkedin")
    /// Image `ic_lock`.
    static let ic_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_lock")
    /// Image `ic_logo-dark`.
    static let ic_logoDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo-dark")
    /// Image `ic_logo_facebook`.
    static let ic_logo_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo_facebook")
    /// Image `ic_logo`.
    static let ic_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo")
    /// Image `ic_menu`.
    static let ic_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu")
    /// Image `ic_mycourse_0`.
    static let ic_mycourse_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mycourse_0")
    /// Image `ic_mycourse_1`.
    static let ic_mycourse_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mycourse_1")
    /// Image `ic_next_blue`.
    static let ic_next_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_next_blue")
    /// Image `ic_no_course_found`.
    static let ic_no_course_found = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_no_course_found")
    /// Image `ic_no_courses`.
    static let ic_no_courses = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_no_courses")
    /// Image `ic_pause`.
    static let ic_pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pause")
    /// Image `ic_pdf copy`.
    static let ic_pdfCopy = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pdf copy")
    /// Image `ic_pdf`.
    static let ic_pdf = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pdf")
    /// Image `ic_pending_courses`.
    static let ic_pending_courses = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pending_courses")
    /// Image `ic_performance`.
    static let ic_performance = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_performance")
    /// Image `ic_placeholder_large`.
    static let ic_placeholder_large = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_placeholder_large")
    /// Image `ic_placeholder_shadow`.
    static let ic_placeholder_shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_placeholder_shadow")
    /// Image `ic_placeholder_small`.
    static let ic_placeholder_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_placeholder_small")
    /// Image `ic_placeholdercategory`.
    static let ic_placeholdercategory = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_placeholdercategory")
    /// Image `ic_play_blue`.
    static let ic_play_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_play_blue")
    /// Image `ic_play_video`.
    static let ic_play_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_play_video")
    /// Image `ic_profile_0`.
    static let ic_profile_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_0")
    /// Image `ic_profile_1`.
    static let ic_profile_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_1")
    /// Image `ic_profile_calendar`.
    static let ic_profile_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_calendar")
    /// Image `ic_profile_instructor`.
    static let ic_profile_instructor = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_instructor")
    /// Image `ic_profile_logout`.
    static let ic_profile_logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_logout")
    /// Image `ic_profile_privacy`.
    static let ic_profile_privacy = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_privacy")
    /// Image `ic_profile_settings`.
    static let ic_profile_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_settings")
    /// Image `ic_profile_terms`.
    static let ic_profile_terms = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_terms")
    /// Image `ic_quiz_analytics`.
    static let ic_quiz_analytics = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_quiz_analytics")
    /// Image `ic_radio_unchaked`.
    static let ic_radio_unchaked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radio_unchaked")
    /// Image `ic_resource`.
    static let ic_resource = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_resource")
    /// Image `ic_reviews_profile`.
    static let ic_reviews_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_reviews_profile")
    /// Image `ic_search_0`.
    static let ic_search_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_0")
    /// Image `ic_search_1`.
    static let ic_search_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_1")
    /// Image `ic_search_tab`.
    static let ic_search_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_tab")
    /// Image `ic_settings`.
    static let ic_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_settings")
    /// Image `ic_share_dark_outline`.
    static let ic_share_dark_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_dark_outline")
    /// Image `ic_share_outline`.
    static let ic_share_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_outline")
    /// Image `ic_share_round_outline`.
    static let ic_share_round_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_round_outline")
    /// Image `ic_share_wt`.
    static let ic_share_wt = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_wt")
    /// Image `ic_slide_btn_off`.
    static let ic_slide_btn_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_slide_btn_off")
    /// Image `ic_slide_btn_on`.
    static let ic_slide_btn_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_slide_btn_on")
    /// Image `ic_star_bg`.
    static let ic_star_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_bg")
    /// Image `ic_star_half_bg`.
    static let ic_star_half_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_half_bg")
    /// Image `ic_star_profile`.
    static let ic_star_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_profile")
    /// Image `ic_star_rating`.
    static let ic_star_rating = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_rating")
    /// Image `ic_star_s_filled`.
    static let ic_star_s_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_s_filled")
    /// Image `ic_star_s_halffilled`.
    static let ic_star_s_halffilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_s_halffilled")
    /// Image `ic_star_s_unfilled`.
    static let ic_star_s_unfilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_s_unfilled")
    /// Image `ic_star_unfilled`.
    static let ic_star_unfilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_unfilled")
    /// Image `ic_student_profile`.
    static let ic_student_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_student_profile")
    /// Image `ic_students_profile`.
    static let ic_students_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_students_profile")
    /// Image `ic_timeframe`.
    static let ic_timeframe = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_timeframe")
    /// Image `ic_tools`.
    static let ic_tools = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tools")
    /// Image `ic_trending_icon_wt`.
    static let ic_trending_icon_wt = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_trending_icon_wt")
    /// Image `ic_unchecked`.
    static let ic_unchecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unchecked")
    /// Image `ic_user_create_course`.
    static let ic_user_create_course = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user_create_course")
    /// Image `ic_verified_step`.
    static let ic_verified_step = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_verified_step")
    /// Image `ic_verified_teacher`.
    static let ic_verified_teacher = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_verified_teacher")
    /// Image `ic_verified`.
    static let ic_verified = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_verified")
    /// Image `ic_video_off`.
    static let ic_video_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_video_off")
    /// Image `ic_video_on`.
    static let ic_video_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_video_on")
    /// Image `ic_video_slide_btn`.
    static let ic_video_slide_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_video_slide_btn")
    /// Image `ic_video_slide_off`.
    static let ic_video_slide_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_video_slide_off")
    /// Image `ic_video_slide_on`.
    static let ic_video_slide_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_video_slide_on")
    /// Image `ic_view_answers`.
    static let ic_view_answers = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_view_answers")
    /// Image `ic_whislist_1`.
    static let ic_whislist_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_whislist_1")
    /// Image `ic_whislist_off`.
    static let ic_whislist_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_whislist_off")
    /// Image `ic_whislist_on`.
    static let ic_whislist_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_whislist_on")
    /// Image `ic_wishlist_0`.
    static let ic_wishlist_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_wishlist_0")
    /// Image `ic_workingTitle`.
    static let ic_workingTitle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_workingTitle")
    /// Image `language`.
    static let language = Rswift.ImageResource(bundle: R.hostingBundle, name: "language")
    /// Image `remove-button`.
    static let removeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "remove-button")
    
    /// `UIImage(named: "Default-568h", bundle: ..., traitCollection: ...)`
    static func default568h(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default568h, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Inst_ic_course", bundle: ..., traitCollection: ...)`
    static func inst_ic_course(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inst_ic_course, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chevron left", bundle: ..., traitCollection: ...)`
    static func chevronLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronLeft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chevron right", bundle: ..., traitCollection: ...)`
    static func chevronRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_All_course", bundle: ..., traitCollection: ...)`
    static func ic_All_course(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_All_course, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_achive_outline", bundle: ..., traitCollection: ...)`
    static func ic_achive_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_achive_outline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add", bundle: ..., traitCollection: ...)`
    static func ic_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_btn_outline", bundle: ..., traitCollection: ...)`
    static func ic_add_btn_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_btn_outline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_calendar", bundle: ..., traitCollection: ...)`
    static func ic_add_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_calendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_lactur", bundle: ..., traitCollection: ...)`
    static func ic_add_lactur(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_lactur, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_quiz", bundle: ..., traitCollection: ...)`
    static func ic_add_quiz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_quiz, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_approved_courses", bundle: ..., traitCollection: ...)`
    static func ic_approved_courses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_approved_courses, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_audio_off", bundle: ..., traitCollection: ...)`
    static func ic_audio_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_audio_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_audio_on", bundle: ..., traitCollection: ...)`
    static func ic_audio_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_audio_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_back_btn_wt", bundle: ..., traitCollection: ...)`
    static func ic_back_btn_wt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_btn_wt, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_backward", bundle: ..., traitCollection: ...)`
    static func ic_backward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_backward, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bookmark_dark_outline", bundle: ..., traitCollection: ...)`
    static func ic_bookmark_dark_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bookmark_dark_outline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bookmark_on", bundle: ..., traitCollection: ...)`
    static func ic_bookmark_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bookmark_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bookmark_outline", bundle: ..., traitCollection: ...)`
    static func ic_bookmark_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bookmark_outline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_calendar", bundle: ..., traitCollection: ...)`
    static func ic_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_calender_view", bundle: ..., traitCollection: ...)`
    static func ic_calender_view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calender_view, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_camera", bundle: ..., traitCollection: ...)`
    static func ic_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_camera_placeholder", bundle: ..., traitCollection: ...)`
    static func ic_camera_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera_placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_captions", bundle: ..., traitCollection: ...)`
    static func ic_captions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_captions, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_certificate_document", bundle: ..., traitCollection: ...)`
    static func ic_certificate_document(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_certificate_document, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_certificate_final", bundle: ..., traitCollection: ...)`
    static func ic_certificate_final(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_certificate_final, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chaked", bundle: ..., traitCollection: ...)`
    static func ic_chaked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chaked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_check", bundle: ..., traitCollection: ...)`
    static func ic_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_check_filled", bundle: ..., traitCollection: ...)`
    static func ic_check_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_filled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_check_unfilled", bundle: ..., traitCollection: ...)`
    static func ic_check_unfilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_unfilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_checkbox_on_s", bundle: ..., traitCollection: ...)`
    static func ic_checkbox_on_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkbox_on_s, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_collaps_arrow", bundle: ..., traitCollection: ...)`
    static func ic_collaps_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_collaps_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_collaps_off", bundle: ..., traitCollection: ...)`
    static func ic_collaps_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_collaps_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_collaps_on", bundle: ..., traitCollection: ...)`
    static func ic_collaps_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_collaps_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_communication", bundle: ..., traitCollection: ...)`
    static func ic_communication(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_communication, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_completed_outline", bundle: ..., traitCollection: ...)`
    static func ic_completed_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_completed_outline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_course", bundle: ..., traitCollection: ...)`
    static func ic_course(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_course, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_course_category", bundle: ..., traitCollection: ...)`
    static func ic_course_category(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_course_category, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_course_complete", bundle: ..., traitCollection: ...)`
    static func ic_course_complete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_course_complete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_course_completed", bundle: ..., traitCollection: ...)`
    static func ic_course_completed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_course_completed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_course_profile", bundle: ..., traitCollection: ...)`
    static func ic_course_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_course_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_create_course", bundle: ..., traitCollection: ...)`
    static func ic_create_course(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_create_course, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cross", bundle: ..., traitCollection: ...)`
    static func ic_cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cross, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_dd_small_blue", bundle: ..., traitCollection: ...)`
    static func ic_dd_small_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dd_small_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_dislike", bundle: ..., traitCollection: ...)`
    static func ic_dislike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dislike, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_doc_off", bundle: ..., traitCollection: ...)`
    static func ic_doc_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_doc_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_doc_on", bundle: ..., traitCollection: ...)`
    static func ic_doc_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_doc_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_download", bundle: ..., traitCollection: ...)`
    static func ic_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_download, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_draft_courses", bundle: ..., traitCollection: ...)`
    static func ic_draft_courses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_draft_courses, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_dropdown_arrow", bundle: ..., traitCollection: ...)`
    static func ic_dropdown_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dropdown_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_earn", bundle: ..., traitCollection: ...)`
    static func ic_earn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_earn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_enrolled", bundle: ..., traitCollection: ...)`
    static func ic_enrolled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_enrolled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_event_calender", bundle: ..., traitCollection: ...)`
    static func ic_event_calender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_event_calender, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_explore_0", bundle: ..., traitCollection: ...)`
    static func ic_explore_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_explore_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_explore_1", bundle: ..., traitCollection: ...)`
    static func ic_explore_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_explore_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_filter-dark", bundle: ..., traitCollection: ...)`
    static func ic_filterDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_filterDark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_filter_white", bundle: ..., traitCollection: ...)`
    static func ic_filter_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_filter_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_forward", bundle: ..., traitCollection: ...)`
    static func ic_forward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_forward, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_full_screen", bundle: ..., traitCollection: ...)`
    static func ic_full_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_full_screen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_golive", bundle: ..., traitCollection: ...)`
    static func ic_golive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_golive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_google", bundle: ..., traitCollection: ...)`
    static func ic_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_google, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_graphic_category", bundle: ..., traitCollection: ...)`
    static func ic_graphic_category(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_graphic_category, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_green_winning_cup", bundle: ..., traitCollection: ...)`
    static func ic_green_winning_cup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_green_winning_cup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_heart_dark_outline", bundle: ..., traitCollection: ...)`
    static func ic_heart_dark_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_heart_dark_outline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_heart_outline", bundle: ..., traitCollection: ...)`
    static func ic_heart_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_heart_outline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_image_placeholder", bundle: ..., traitCollection: ...)`
    static func ic_image_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_image_placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_infographic_type", bundle: ..., traitCollection: ...)`
    static func ic_infographic_type(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_infographic_type, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_land_bg", bundle: ..., traitCollection: ...)`
    static func ic_land_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_land_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_language_details", bundle: ..., traitCollection: ...)`
    static func ic_language_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_language_details, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_language_select", bundle: ..., traitCollection: ...)`
    static func ic_language_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_language_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_library", bundle: ..., traitCollection: ...)`
    static func ic_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_library, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_like_off", bundle: ..., traitCollection: ...)`
    static func ic_like_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_like_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_line_off", bundle: ..., traitCollection: ...)`
    static func ic_line_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_line_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_line_on", bundle: ..., traitCollection: ...)`
    static func ic_line_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_line_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_link", bundle: ..., traitCollection: ...)`
    static func ic_link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_link, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_linkedin", bundle: ..., traitCollection: ...)`
    static func ic_linkedin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_linkedin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_lock", bundle: ..., traitCollection: ...)`
    static func ic_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_lock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_logo", bundle: ..., traitCollection: ...)`
    static func ic_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_logo-dark", bundle: ..., traitCollection: ...)`
    static func ic_logoDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logoDark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_logo_facebook", bundle: ..., traitCollection: ...)`
    static func ic_logo_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo_facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu", bundle: ..., traitCollection: ...)`
    static func ic_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_mycourse_0", bundle: ..., traitCollection: ...)`
    static func ic_mycourse_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mycourse_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_mycourse_1", bundle: ..., traitCollection: ...)`
    static func ic_mycourse_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mycourse_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_next_blue", bundle: ..., traitCollection: ...)`
    static func ic_next_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_next_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_no_course_found", bundle: ..., traitCollection: ...)`
    static func ic_no_course_found(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_no_course_found, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_no_courses", bundle: ..., traitCollection: ...)`
    static func ic_no_courses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_no_courses, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pause", bundle: ..., traitCollection: ...)`
    static func ic_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pause, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pdf copy", bundle: ..., traitCollection: ...)`
    static func ic_pdfCopy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pdfCopy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pdf", bundle: ..., traitCollection: ...)`
    static func ic_pdf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pdf, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pending_courses", bundle: ..., traitCollection: ...)`
    static func ic_pending_courses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pending_courses, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_performance", bundle: ..., traitCollection: ...)`
    static func ic_performance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_performance, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_placeholder_large", bundle: ..., traitCollection: ...)`
    static func ic_placeholder_large(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_placeholder_large, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_placeholder_shadow", bundle: ..., traitCollection: ...)`
    static func ic_placeholder_shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_placeholder_shadow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_placeholder_small", bundle: ..., traitCollection: ...)`
    static func ic_placeholder_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_placeholder_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_placeholdercategory", bundle: ..., traitCollection: ...)`
    static func ic_placeholdercategory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_placeholdercategory, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_play_blue", bundle: ..., traitCollection: ...)`
    static func ic_play_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_play_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_play_video", bundle: ..., traitCollection: ...)`
    static func ic_play_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_play_video, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_profile_0", bundle: ..., traitCollection: ...)`
    static func ic_profile_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_profile_1", bundle: ..., traitCollection: ...)`
    static func ic_profile_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_profile_calendar", bundle: ..., traitCollection: ...)`
    static func ic_profile_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_calendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_profile_instructor", bundle: ..., traitCollection: ...)`
    static func ic_profile_instructor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_instructor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_profile_logout", bundle: ..., traitCollection: ...)`
    static func ic_profile_logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_logout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_profile_privacy", bundle: ..., traitCollection: ...)`
    static func ic_profile_privacy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_privacy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_profile_settings", bundle: ..., traitCollection: ...)`
    static func ic_profile_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_profile_terms", bundle: ..., traitCollection: ...)`
    static func ic_profile_terms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_terms, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_quiz_analytics", bundle: ..., traitCollection: ...)`
    static func ic_quiz_analytics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_quiz_analytics, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_radio_unchaked", bundle: ..., traitCollection: ...)`
    static func ic_radio_unchaked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radio_unchaked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_resource", bundle: ..., traitCollection: ...)`
    static func ic_resource(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_resource, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_reviews_profile", bundle: ..., traitCollection: ...)`
    static func ic_reviews_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_reviews_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search_0", bundle: ..., traitCollection: ...)`
    static func ic_search_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search_1", bundle: ..., traitCollection: ...)`
    static func ic_search_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search_tab", bundle: ..., traitCollection: ...)`
    static func ic_search_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_settings", bundle: ..., traitCollection: ...)`
    static func ic_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_dark_outline", bundle: ..., traitCollection: ...)`
    static func ic_share_dark_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_dark_outline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_outline", bundle: ..., traitCollection: ...)`
    static func ic_share_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_outline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_round_outline", bundle: ..., traitCollection: ...)`
    static func ic_share_round_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_round_outline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_wt", bundle: ..., traitCollection: ...)`
    static func ic_share_wt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_wt, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_slide_btn_off", bundle: ..., traitCollection: ...)`
    static func ic_slide_btn_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_slide_btn_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_slide_btn_on", bundle: ..., traitCollection: ...)`
    static func ic_slide_btn_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_slide_btn_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star_bg", bundle: ..., traitCollection: ...)`
    static func ic_star_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star_half_bg", bundle: ..., traitCollection: ...)`
    static func ic_star_half_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_half_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star_profile", bundle: ..., traitCollection: ...)`
    static func ic_star_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star_rating", bundle: ..., traitCollection: ...)`
    static func ic_star_rating(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_rating, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star_s_filled", bundle: ..., traitCollection: ...)`
    static func ic_star_s_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_s_filled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star_s_halffilled", bundle: ..., traitCollection: ...)`
    static func ic_star_s_halffilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_s_halffilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star_s_unfilled", bundle: ..., traitCollection: ...)`
    static func ic_star_s_unfilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_s_unfilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star_unfilled", bundle: ..., traitCollection: ...)`
    static func ic_star_unfilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_unfilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_student_profile", bundle: ..., traitCollection: ...)`
    static func ic_student_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_student_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_students_profile", bundle: ..., traitCollection: ...)`
    static func ic_students_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_students_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_timeframe", bundle: ..., traitCollection: ...)`
    static func ic_timeframe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_timeframe, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tools", bundle: ..., traitCollection: ...)`
    static func ic_tools(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tools, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_trending_icon_wt", bundle: ..., traitCollection: ...)`
    static func ic_trending_icon_wt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_trending_icon_wt, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unchecked", bundle: ..., traitCollection: ...)`
    static func ic_unchecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unchecked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_user_create_course", bundle: ..., traitCollection: ...)`
    static func ic_user_create_course(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user_create_course, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_verified", bundle: ..., traitCollection: ...)`
    static func ic_verified(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_verified, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_verified_step", bundle: ..., traitCollection: ...)`
    static func ic_verified_step(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_verified_step, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_verified_teacher", bundle: ..., traitCollection: ...)`
    static func ic_verified_teacher(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_verified_teacher, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_video_off", bundle: ..., traitCollection: ...)`
    static func ic_video_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_video_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_video_on", bundle: ..., traitCollection: ...)`
    static func ic_video_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_video_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_video_slide_btn", bundle: ..., traitCollection: ...)`
    static func ic_video_slide_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_video_slide_btn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_video_slide_off", bundle: ..., traitCollection: ...)`
    static func ic_video_slide_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_video_slide_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_video_slide_on", bundle: ..., traitCollection: ...)`
    static func ic_video_slide_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_video_slide_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_view_answers", bundle: ..., traitCollection: ...)`
    static func ic_view_answers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_view_answers, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_whislist_1", bundle: ..., traitCollection: ...)`
    static func ic_whislist_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_whislist_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_whislist_off", bundle: ..., traitCollection: ...)`
    static func ic_whislist_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_whislist_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_whislist_on", bundle: ..., traitCollection: ...)`
    static func ic_whislist_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_whislist_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_wishlist_0", bundle: ..., traitCollection: ...)`
    static func ic_wishlist_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_wishlist_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_workingTitle", bundle: ..., traitCollection: ...)`
    static func ic_workingTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_workingTitle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "language", bundle: ..., traitCollection: ...)`
    static func language(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.language, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "remove-button", bundle: ..., traitCollection: ...)`
    static func removeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.removeButton, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 17 nibs.
  struct nib {
    /// Nib `AddAnswerReasonTableViewCell`.
    static let addAnswerReasonTableViewCell = _R.nib._AddAnswerReasonTableViewCell()
    /// Nib `AddCurriculumTitleDescTableViewCell`.
    static let addCurriculumTitleDescTableViewCell = _R.nib._AddCurriculumTitleDescTableViewCell()
    /// Nib `AddQuestionTableViewCell`.
    static let addQuestionTableViewCell = _R.nib._AddQuestionTableViewCell()
    /// Nib `AnsTableCell`.
    static let ansTableCell = _R.nib._AnsTableCell()
    /// Nib `BannerCollectionViewCell`.
    static let bannerCollectionViewCell = _R.nib._BannerCollectionViewCell()
    /// Nib `BannerView`.
    static let bannerView = _R.nib._BannerView()
    /// Nib `CourseDetailTextViewCell`.
    static let courseDetailTextViewCell = _R.nib._CourseDetailTextViewCell()
    /// Nib `CourseObjectiveFooterView`.
    static let courseObjectiveFooterView = _R.nib._CourseObjectiveFooterView()
    /// Nib `ExploreCategoryCollectionViewCell`.
    static let exploreCategoryCollectionViewCell = _R.nib._ExploreCategoryCollectionViewCell()
    /// Nib `ExploreCourseCollectionViewCell`.
    static let exploreCourseCollectionViewCell = _R.nib._ExploreCourseCollectionViewCell()
    /// Nib `HomeHeaderView`.
    static let homeHeaderView = _R.nib._HomeHeaderView()
    /// Nib `InstructorListingCollectionViewCell`.
    static let instructorListingCollectionViewCell = _R.nib._InstructorListingCollectionViewCell()
    /// Nib `InstructorViewsCollectionViewCell`.
    static let instructorViewsCollectionViewCell = _R.nib._InstructorViewsCollectionViewCell()
    /// Nib `MediaPickerCollectionViewCell`.
    static let mediaPickerCollectionViewCell = _R.nib._MediaPickerCollectionViewCell()
    /// Nib `MediaPickerView`.
    static let mediaPickerView = _R.nib._MediaPickerView()
    /// Nib `QuestTableCell`.
    static let questTableCell = _R.nib._QuestTableCell()
    /// Nib `TextViewCell`.
    static let textViewCell = _R.nib._TextViewCell()
    
    /// `UINib(name: "AddAnswerReasonTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addAnswerReasonTableViewCell) instead")
    static func addAnswerReasonTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addAnswerReasonTableViewCell)
    }
    
    /// `UINib(name: "AddCurriculumTitleDescTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addCurriculumTitleDescTableViewCell) instead")
    static func addCurriculumTitleDescTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addCurriculumTitleDescTableViewCell)
    }
    
    /// `UINib(name: "AddQuestionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addQuestionTableViewCell) instead")
    static func addQuestionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addQuestionTableViewCell)
    }
    
    /// `UINib(name: "AnsTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ansTableCell) instead")
    static func ansTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ansTableCell)
    }
    
    /// `UINib(name: "BannerCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bannerCollectionViewCell) instead")
    static func bannerCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bannerCollectionViewCell)
    }
    
    /// `UINib(name: "BannerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bannerView) instead")
    static func bannerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bannerView)
    }
    
    /// `UINib(name: "CourseDetailTextViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.courseDetailTextViewCell) instead")
    static func courseDetailTextViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.courseDetailTextViewCell)
    }
    
    /// `UINib(name: "CourseObjectiveFooterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.courseObjectiveFooterView) instead")
    static func courseObjectiveFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.courseObjectiveFooterView)
    }
    
    /// `UINib(name: "ExploreCategoryCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.exploreCategoryCollectionViewCell) instead")
    static func exploreCategoryCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.exploreCategoryCollectionViewCell)
    }
    
    /// `UINib(name: "ExploreCourseCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.exploreCourseCollectionViewCell) instead")
    static func exploreCourseCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.exploreCourseCollectionViewCell)
    }
    
    /// `UINib(name: "HomeHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeHeaderView) instead")
    static func homeHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeHeaderView)
    }
    
    /// `UINib(name: "InstructorListingCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.instructorListingCollectionViewCell) instead")
    static func instructorListingCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.instructorListingCollectionViewCell)
    }
    
    /// `UINib(name: "InstructorViewsCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.instructorViewsCollectionViewCell) instead")
    static func instructorViewsCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.instructorViewsCollectionViewCell)
    }
    
    /// `UINib(name: "MediaPickerCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mediaPickerCollectionViewCell) instead")
    static func mediaPickerCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mediaPickerCollectionViewCell)
    }
    
    /// `UINib(name: "MediaPickerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mediaPickerView) instead")
    static func mediaPickerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mediaPickerView)
    }
    
    /// `UINib(name: "QuestTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questTableCell) instead")
    static func questTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questTableCell)
    }
    
    /// `UINib(name: "TextViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.textViewCell) instead")
    static func textViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textViewCell)
    }
    
    static func addAnswerReasonTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddAnswerReasonTableViewCell? {
      return R.nib.addAnswerReasonTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddAnswerReasonTableViewCell
    }
    
    static func addCurriculumTitleDescTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddCurriculumTitleDescTableViewCell? {
      return R.nib.addCurriculumTitleDescTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddCurriculumTitleDescTableViewCell
    }
    
    static func addQuestionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddQuestionTableViewCell? {
      return R.nib.addQuestionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddQuestionTableViewCell
    }
    
    static func ansTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnsTableCell? {
      return R.nib.ansTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnsTableCell
    }
    
    static func bannerCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BannerCollectionViewCell? {
      return R.nib.bannerCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BannerCollectionViewCell
    }
    
    static func bannerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.bannerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func courseDetailTextViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseDetailTextViewCell? {
      return R.nib.courseDetailTextViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseDetailTextViewCell
    }
    
    static func courseObjectiveFooterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseObjectiveFooterView? {
      return R.nib.courseObjectiveFooterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseObjectiveFooterView
    }
    
    static func exploreCategoryCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExploreCategoryCollectionViewCell? {
      return R.nib.exploreCategoryCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExploreCategoryCollectionViewCell
    }
    
    static func exploreCourseCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExploreCourseCollectionViewCell? {
      return R.nib.exploreCourseCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExploreCourseCollectionViewCell
    }
    
    static func homeHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeHeaderView? {
      return R.nib.homeHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeHeaderView
    }
    
    static func instructorListingCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InstructorListingCollectionViewCell? {
      return R.nib.instructorListingCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InstructorListingCollectionViewCell
    }
    
    static func instructorViewsCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InstructorViewsCollectionViewCell? {
      return R.nib.instructorViewsCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InstructorViewsCollectionViewCell
    }
    
    static func mediaPickerCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MediaPickerCollectionViewCell? {
      return R.nib.mediaPickerCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MediaPickerCollectionViewCell
    }
    
    static func mediaPickerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mediaPickerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func questTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestTableCell? {
      return R.nib.questTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestTableCell
    }
    
    static func textViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TextViewCell? {
      return R.nib.textViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 20 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AnsTableCell`.
    static let ansTableCell: Rswift.ReuseIdentifier<AnsTableCell> = Rswift.ReuseIdentifier(identifier: "AnsTableCell")
    /// Reuse identifier `BannerCollectionViewCell`.
    static let bannerCollectionViewCell: Rswift.ReuseIdentifier<BannerCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "BannerCollectionViewCell")
    /// Reuse identifier `CourseCreationCell`.
    static let courseCreationCell: Rswift.ReuseIdentifier<CourseCreationCell> = Rswift.ReuseIdentifier(identifier: "CourseCreationCell")
    /// Reuse identifier `CourseDetailTextViewCell`.
    static let courseDetailTextViewCell: Rswift.ReuseIdentifier<CourseDetailTextViewCell> = Rswift.ReuseIdentifier(identifier: "CourseDetailTextViewCell")
    /// Reuse identifier `CourseDetailsCell`.
    static let courseDetailsCell: Rswift.ReuseIdentifier<CourseDetailsCell> = Rswift.ReuseIdentifier(identifier: "CourseDetailsCell")
    /// Reuse identifier `CourseObjectiveCell`.
    static let courseObjectiveCell: Rswift.ReuseIdentifier<CourseObjectiveCell> = Rswift.ReuseIdentifier(identifier: "CourseObjectiveCell")
    /// Reuse identifier `ExploreCategoriesTableViewCell`.
    static let exploreCategoriesTableViewCell: Rswift.ReuseIdentifier<ExploreCategoriesTableViewCell> = Rswift.ReuseIdentifier(identifier: "ExploreCategoriesTableViewCell")
    /// Reuse identifier `ExploreCategoryCollectionViewCell`.
    static let exploreCategoryCollectionViewCell: Rswift.ReuseIdentifier<ExploreCategoryCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ExploreCategoryCollectionViewCell")
    /// Reuse identifier `ExploreCourseCollectionViewCell`.
    static let exploreCourseCollectionViewCell: Rswift.ReuseIdentifier<ExploreCourseCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ExploreCourseCollectionViewCell")
    /// Reuse identifier `ExploreCourseListingTableViewCell`.
    static let exploreCourseListingTableViewCell: Rswift.ReuseIdentifier<ExploreCourseListingTableViewCell> = Rswift.ReuseIdentifier(identifier: "ExploreCourseListingTableViewCell")
    /// Reuse identifier `ExploreInstructorListingTableViewCell`.
    static let exploreInstructorListingTableViewCell: Rswift.ReuseIdentifier<ExploreInstructorListingTableViewCell> = Rswift.ReuseIdentifier(identifier: "ExploreInstructorListingTableViewCell")
    /// Reuse identifier `InstructorListingCollectionViewCell`.
    static let instructorListingCollectionViewCell: Rswift.ReuseIdentifier<InstructorListingCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "InstructorListingCollectionViewCell")
    /// Reuse identifier `InstructorViewsCollectionViewCell`.
    static let instructorViewsCollectionViewCell: Rswift.ReuseIdentifier<InstructorViewsCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "InstructorViewsCollectionViewCell")
    /// Reuse identifier `ProfileCell`.
    static let profileCell: Rswift.ReuseIdentifier<ProfileCell> = Rswift.ReuseIdentifier(identifier: "ProfileCell")
    /// Reuse identifier `QuestTableCell`.
    static let questTableCell: Rswift.ReuseIdentifier<QuestTableCell> = Rswift.ReuseIdentifier(identifier: "QuestTableCell")
    /// Reuse identifier `SignUpTableViewCell`.
    static let signUpTableViewCell: Rswift.ReuseIdentifier<SignUpTableViewCell> = Rswift.ReuseIdentifier(identifier: "SignUpTableViewCell")
    /// Reuse identifier `SubmitCourseCell`.
    static let submitCourseCell: Rswift.ReuseIdentifier<SubmitCourseCell> = Rswift.ReuseIdentifier(identifier: "SubmitCourseCell")
    /// Reuse identifier `TextViewCell`.
    static let textViewCell: Rswift.ReuseIdentifier<TextViewCell> = Rswift.ReuseIdentifier(identifier: "TextViewCell")
    /// Reuse identifier `UserProfileTableViewCell`.
    static let userProfileTableViewCell: Rswift.ReuseIdentifier<UserProfileTableViewCell> = Rswift.ReuseIdentifier(identifier: "UserProfileTableViewCell")
    /// Reuse identifier `instHomeTableCell`.
    static let instHomeTableCell: Rswift.ReuseIdentifier<InstHomeTableCell> = Rswift.ReuseIdentifier(identifier: "instHomeTableCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `CreateCourse`.
    static let createCourse = _R.storyboard.createCourse()
    /// Storyboard `Curriculum`.
    static let curriculum = _R.storyboard.curriculum()
    /// Storyboard `InstructorDashboard`.
    static let instructorDashboard = _R.storyboard.instructorDashboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `PublishCourses`.
    static let publishCourses = _R.storyboard.publishCourses()
    /// Storyboard `UserDashBoard`.
    static let userDashBoard = _R.storyboard.userDashBoard()
    
    /// `UIStoryboard(name: "CreateCourse", bundle: ...)`
    static func createCourse(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.createCourse)
    }
    
    /// `UIStoryboard(name: "Curriculum", bundle: ...)`
    static func curriculum(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.curriculum)
    }
    
    /// `UIStoryboard(name: "InstructorDashboard", bundle: ...)`
    static func instructorDashboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.instructorDashboard)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "PublishCourses", bundle: ...)`
    static func publishCourses(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.publishCourses)
    }
    
    /// `UIStoryboard(name: "UserDashBoard", bundle: ...)`
    static func userDashBoard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.userDashBoard)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 7 localization tables.
  struct string {
    /// This `R.string.cameraUI` struct is generated, and contains static references to 13 localization keys.
    struct cameraUI {
      /// ar translation: AE/AF LOCK
      /// 
      /// Locales: ar, en, es, es-419
      static let aeaf_LOCK_TEXT = Rswift.StringResource(key: "AEAF_LOCK_TEXT", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Auto
      /// 
      /// Locales: ar, en, es, es-419
      static let hdr_AUTO = Rswift.StringResource(key: "HDR_AUTO", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Cancel
      /// 
      /// Locales: ar, en, es, es-419
      static let api_CANCEL_TITLE = Rswift.StringResource(key: "API_CANCEL_TITLE", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: MOMENT
      /// 
      /// Locales: ar, en, es, es-419
      static let moment_TITLE_PREFIX_FORMAT = Rswift.StringResource(key: "MOMENT_TITLE_PREFIX_FORMAT", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Max Recording Duration Reached
      /// 
      /// Locales: ar, en, es, es-419
      static let max_RECORDING_DURATION_REACHED = Rswift.StringResource(key: "MAX_RECORDING_DURATION_REACHED", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Off
      /// 
      /// Locales: ar, en, es, es-419
      static let hdr_OFF = Rswift.StringResource(key: "HDR_OFF", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Off
      /// 
      /// Locales: ar, en, es, es-419
      static let timer_OFF_TEXT = Rswift.StringResource(key: "TIMER_OFF_TEXT", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: On
      /// 
      /// Locales: ar, en, es, es-419
      static let hdr_ON = Rswift.StringResource(key: "HDR_ON", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: PHOTO
      /// 
      /// Locales: ar, en, es, es-419
      static let photO = Rswift.StringResource(key: "PHOTO", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Recording Stopped
      /// 
      /// Locales: ar, en, es, es-419
      static let recording_STOPPED_TITLE = Rswift.StringResource(key: "RECORDING_STOPPED_TITLE", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: USE PHOTO
      /// 
      /// Locales: ar, en, es, es-419
      static let use_PHOTO = Rswift.StringResource(key: "USE_PHOTO", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: USE VIDEO
      /// 
      /// Locales: ar, en, es, es-419
      static let use_VIDEO = Rswift.StringResource(key: "USE_VIDEO", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: VIDEO
      /// 
      /// Locales: ar, en, es, es-419
      static let videO = Rswift.StringResource(key: "VIDEO", tableName: "CameraUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      
      /// ar translation: AE/AF LOCK
      /// 
      /// Locales: ar, en, es, es-419
      static func aeaf_LOCK_TEXT(_: Void = ()) -> String {
        return NSLocalizedString("AEAF_LOCK_TEXT", tableName: "CameraUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Auto
      /// 
      /// Locales: ar, en, es, es-419
      static func hdr_AUTO(_: Void = ()) -> String {
        return NSLocalizedString("HDR_AUTO", tableName: "CameraUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Cancel
      /// 
      /// Locales: ar, en, es, es-419
      static func api_CANCEL_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("API_CANCEL_TITLE", tableName: "CameraUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: MOMENT
      /// 
      /// Locales: ar, en, es, es-419
      static func moment_TITLE_PREFIX_FORMAT(_: Void = ()) -> String {
        return NSLocalizedString("MOMENT_TITLE_PREFIX_FORMAT", tableName: "CameraUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Max Recording Duration Reached
      /// 
      /// Locales: ar, en, es, es-419
      static func max_RECORDING_DURATION_REACHED(_: Void = ()) -> String {
        return NSLocalizedString("MAX_RECORDING_DURATION_REACHED", tableName: "CameraUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Off
      /// 
      /// Locales: ar, en, es, es-419
      static func hdr_OFF(_: Void = ()) -> String {
        return NSLocalizedString("HDR_OFF", tableName: "CameraUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Off
      /// 
      /// Locales: ar, en, es, es-419
      static func timer_OFF_TEXT(_: Void = ()) -> String {
        return NSLocalizedString("TIMER_OFF_TEXT", tableName: "CameraUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: On
      /// 
      /// Locales: ar, en, es, es-419
      static func hdr_ON(_: Void = ()) -> String {
        return NSLocalizedString("HDR_ON", tableName: "CameraUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: PHOTO
      /// 
      /// Locales: ar, en, es, es-419
      static func photO(_: Void = ()) -> String {
        return NSLocalizedString("PHOTO", tableName: "CameraUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Recording Stopped
      /// 
      /// Locales: ar, en, es, es-419
      static func recording_STOPPED_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("RECORDING_STOPPED_TITLE", tableName: "CameraUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: USE PHOTO
      /// 
      /// Locales: ar, en, es, es-419
      static func use_PHOTO(_: Void = ()) -> String {
        return NSLocalizedString("USE_PHOTO", tableName: "CameraUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: USE VIDEO
      /// 
      /// Locales: ar, en, es, es-419
      static func use_VIDEO(_: Void = ()) -> String {
        return NSLocalizedString("USE_VIDEO", tableName: "CameraUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: VIDEO
      /// 
      /// Locales: ar, en, es, es-419
      static func videO(_: Void = ()) -> String {
        return NSLocalizedString("VIDEO", tableName: "CameraUI", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.googlePlacePicker` struct is generated, and contains static references to 3 localization keys.
    struct googlePlacePicker {
      /// ar translation:  Select a Location 
      /// 
      /// Locales: ar, en, es
      static let placePickerTitle = Rswift.StringResource(key: "PlacePickerTitle", tableName: "GooglePlacePicker", bundle: R.hostingBundle, locales: ["ar", "en", "es"], comment: nil)
      /// ar translation: Select This Location
      /// 
      /// Locales: ar, en, es
      static let placePickerSelectThisLocation = Rswift.StringResource(key: "PlacePickerSelectThisLocation", tableName: "GooglePlacePicker", bundle: R.hostingBundle, locales: ["ar", "en", "es"], comment: nil)
      /// ar translation: Updating Places
      /// 
      /// Locales: ar, en, es
      static let placePickerUpdatingPlaces = Rswift.StringResource(key: "PlacePickerUpdatingPlaces", tableName: "GooglePlacePicker", bundle: R.hostingBundle, locales: ["ar", "en", "es"], comment: nil)
      
      /// ar translation:  Select a Location 
      /// 
      /// Locales: ar, en, es
      static func placePickerTitle(_: Void = ()) -> String {
        return NSLocalizedString("PlacePickerTitle", tableName: "GooglePlacePicker", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Select This Location
      /// 
      /// Locales: ar, en, es
      static func placePickerSelectThisLocation(_: Void = ()) -> String {
        return NSLocalizedString("PlacePickerSelectThisLocation", tableName: "GooglePlacePicker", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Updating Places
      /// 
      /// Locales: ar, en, es
      static func placePickerUpdatingPlaces(_: Void = ()) -> String {
        return NSLocalizedString("PlacePickerUpdatingPlaces", tableName: "GooglePlacePicker", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.googlePlaces` struct is generated, and contains static references to 6 localization keys.
    struct googlePlaces {
      /// ar translation: Can't load search results
      /// 
      /// Locales: ar, en, es, es-419
      static let placeAutocompleteCantLoadResults = Rswift.StringResource(key: "PlaceAutocompleteCantLoadResults", tableName: "GooglePlaces", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: No results found
      /// 
      /// Locales: ar, en, es, es-419
      static let placeAutocompleteLocationUnrecognized = Rswift.StringResource(key: "PlaceAutocompleteLocationUnrecognized", tableName: "GooglePlaces", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Search
      /// 
      /// Locales: ar, en, es, es-419
      static let placeAutocompleteSearchBarPlaceholder = Rswift.StringResource(key: "PlaceAutocompleteSearchBarPlaceholder", tableName: "GooglePlaces", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Select This Location
      /// 
      /// Locales: ar, en, es, es-419
      static let placePickerSelectThisLocation = Rswift.StringResource(key: "PlacePickerSelectThisLocation", tableName: "GooglePlaces", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Try again
      /// 
      /// Locales: ar, en, es, es-419
      static let placeAutocompleteTryAgainButtonLabel = Rswift.StringResource(key: "PlaceAutocompleteTryAgainButtonLabel", tableName: "GooglePlaces", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Updating Places
      /// 
      /// Locales: ar, en, es, es-419
      static let placePickerUpdatingPlaces = Rswift.StringResource(key: "PlacePickerUpdatingPlaces", tableName: "GooglePlaces", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      
      /// ar translation: Can't load search results
      /// 
      /// Locales: ar, en, es, es-419
      static func placeAutocompleteCantLoadResults(_: Void = ()) -> String {
        return NSLocalizedString("PlaceAutocompleteCantLoadResults", tableName: "GooglePlaces", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: No results found
      /// 
      /// Locales: ar, en, es, es-419
      static func placeAutocompleteLocationUnrecognized(_: Void = ()) -> String {
        return NSLocalizedString("PlaceAutocompleteLocationUnrecognized", tableName: "GooglePlaces", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Search
      /// 
      /// Locales: ar, en, es, es-419
      static func placeAutocompleteSearchBarPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("PlaceAutocompleteSearchBarPlaceholder", tableName: "GooglePlaces", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Select This Location
      /// 
      /// Locales: ar, en, es, es-419
      static func placePickerSelectThisLocation(_: Void = ()) -> String {
        return NSLocalizedString("PlacePickerSelectThisLocation", tableName: "GooglePlaces", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Try again
      /// 
      /// Locales: ar, en, es, es-419
      static func placeAutocompleteTryAgainButtonLabel(_: Void = ()) -> String {
        return NSLocalizedString("PlaceAutocompleteTryAgainButtonLabel", tableName: "GooglePlaces", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Updating Places
      /// 
      /// Locales: ar, en, es, es-419
      static func placePickerUpdatingPlaces(_: Void = ()) -> String {
        return NSLocalizedString("PlacePickerUpdatingPlaces", tableName: "GooglePlaces", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizedStrings` struct is generated, and contains static references to 75 localization keys.
    struct localizedStrings {
      /// en translation: Add subtitles
      /// 
      /// Locales: en
      static let addSubtitles = Rswift.StringResource(key: "Add subtitles", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: All courses
      /// 
      /// Locales: en
      static let allCourses = Rswift.StringResource(key: "All courses", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Approved
      /// 
      /// Locales: en
      static let approved = Rswift.StringResource(key: "Approved", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Arabic
      /// 
      /// Locales: en
      static let arabic = Rswift.StringResource(key: "Arabic", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Are there any course requirements or prerequisites?
      /// 
      /// Locales: en
      static let courseRequirements = Rswift.StringResource(key: "course requirements", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Become an instructor
      /// 
      /// Locales: en
      static let becomeAnInstructor = Rswift.StringResource(key: "Become an instructor", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Become an instructor and earn
      /// 
      /// Locales: en
      static let becomeAnInstructorAndEarn = Rswift.StringResource(key: "Become an instructor and earn", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Book your calender
      /// 
      /// Locales: en
      static let bookYourCalender = Rswift.StringResource(key: "Book your calender", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Build Your Audience
      /// 
      /// Locales: en
      static let courseTitle3 = Rswift.StringResource(key: "Course Title3", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: CREATE COURSE
      /// 
      /// Locales: en
      static let courseButtonTitle = Rswift.StringResource(key: "Course ButtonTitle", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Change language
      /// 
      /// Locales: en
      static let changeLanguage = Rswift.StringResource(key: "Change language", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Checkout all the courses you have created
      /// 
      /// Locales: en
      static let allcoursesDesc = Rswift.StringResource(key: "AllcoursesDesc", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Classroom
      /// 
      /// Locales: en
      static let option1 = Rswift.StringResource(key: "Option1", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Communication
      /// 
      /// Locales: en
      static let communication = Rswift.StringResource(key: "Communication", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Complete the course details to make them online
      /// 
      /// Locales: en
      static let draftsDesc = Rswift.StringResource(key: "DraftsDesc", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Course
      /// 
      /// Locales: en
      static let course = Rswift.StringResource(key: "Course", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Course Language
      /// 
      /// Locales: en
      static let courseLanguage = Rswift.StringResource(key: "Course Language", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Course Messages
      /// 
      /// Locales: en
      static let courseMessages = Rswift.StringResource(key: "Course Messages", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Course Preview
      /// 
      /// Locales: en
      static let coursePreview = Rswift.StringResource(key: "Course Preview", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Course Type
      /// 
      /// Locales: en
      static let courseType = Rswift.StringResource(key: "Course Type", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Course catergory
      /// 
      /// Locales: en
      static let courseCatergory = Rswift.StringResource(key: "Course catergory", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Course detail
      /// 
      /// Locales: en
      static let courseDetail = Rswift.StringResource(key: "Course detail", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Course details
      /// 
      /// Locales: en
      static let courseDetails = Rswift.StringResource(key: "Course details", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Course objective and requirments
      /// 
      /// Locales: en
      static let courseObjectiveAndRequirments = Rswift.StringResource(key: "Course objective and requirments", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Course structure
      /// 
      /// Locales: en
      static let courseStructure = Rswift.StringResource(key: "Course structure", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Course sub catergory
      /// 
      /// Locales: en
      static let courseSubCatergory = Rswift.StringResource(key: "Course sub catergory", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Courses title
      /// 
      /// Locales: en
      static let coursesTitle = Rswift.StringResource(key: "Courses title", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create Curriculum
      /// 
      /// Locales: en
      static let createCurriculum = Rswift.StringResource(key: "Create Curriculum", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create a course
      /// 
      /// Locales: en
      static let createACourse = Rswift.StringResource(key: "Create a course", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create an Engaging Course
      /// 
      /// Locales: en
      static let courseTitle2 = Rswift.StringResource(key: "Course Title2", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create your content
      /// 
      /// Locales: en
      static let createYourContent = Rswift.StringResource(key: "Create your content", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Earn money while teaching what you love to do in simple and easy steps
      /// 
      /// Locales: en
      static let createCourseDesc = Rswift.StringResource(key: "CreateCourseDesc", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: English
      /// 
      /// Locales: en
      static let english = Rswift.StringResource(key: "English", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Example: Be able to…..
      /// 
      /// Locales: en
      static let objectivePlaceholder2 = Rswift.StringResource(key: "ObjectivePlaceholder2", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: GET STARTED
      /// 
      /// Locales: en
      static let getstarteD = Rswift.StringResource(key: "GET STARTED", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: How much of a video 'pro' are you?
      /// 
      /// Locales: en
      static let videoQuestion = Rswift.StringResource(key: "Video Question", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: I have some knowledge
      /// 
      /// Locales: en
      static let videoOption2 = Rswift.StringResource(key: "VideoOption2", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: I have video ready to upload
      /// 
      /// Locales: en
      static let videoOption4 = Rswift.StringResource(key: "VideoOption4", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: I'm beginner
      /// 
      /// Locales: en
      static let videoOption1 = Rswift.StringResource(key: "VideoOption1", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: I'm experienced
      /// 
      /// Locales: en
      static let videoOption3 = Rswift.StringResource(key: "VideoOption3", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Join the Newcomer Challenge!
      /// 
      /// Locales: en
      static let courseTitle4 = Rswift.StringResource(key: "Course Title4", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Jump Into Course Creation
      /// 
      /// Locales: en
      static let courseTitle1 = Rswift.StringResource(key: "Course Title1", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Library
      /// 
      /// Locales: en
      static let library = Rswift.StringResource(key: "Library", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Little or no prior experience
      /// 
      /// Locales: en
      static let option3 = Rswift.StringResource(key: "Option3", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Logout of your account
      /// 
      /// Locales: en
      static let logoutOfYourAccount = Rswift.StringResource(key: "Logout of your account", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Manage your account
      /// 
      /// Locales: en
      static let manageYourAccount = Rswift.StringResource(key: "Manage your account", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: My Calander
      /// 
      /// Locales: en
      static let myCalander = Rswift.StringResource(key: "My Calander", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Online
      /// 
      /// Locales: en
      static let option2 = Rswift.StringResource(key: "Option2", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Other
      /// 
      /// Locales: en
      static let option4 = Rswift.StringResource(key: "Option4", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pending for approval
      /// 
      /// Locales: en
      static let pendingForApproval = Rswift.StringResource(key: "Pending for approval", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Performance
      /// 
      /// Locales: en
      static let performance = Rswift.StringResource(key: "Performance", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Plan your courses
      /// 
      /// Locales: en
      static let planYourCourses = Rswift.StringResource(key: "Plan your courses", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please add..
      /// 
      /// Locales: en
      static let objectivePlaceholder1 = Rswift.StringResource(key: "ObjectivePlaceholder1", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pricing
      /// 
      /// Locales: en
      static let pricing = Rswift.StringResource(key: "Pricing", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy
      /// 
      /// Locales: en
      static let privacyPolicy = Rswift.StringResource(key: "Privacy Policy", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Promotions
      /// 
      /// Locales: en
      static let promotions = Rswift.StringResource(key: "Promotions", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Publish your courses
      /// 
      /// Locales: en
      static let publishYourCourses = Rswift.StringResource(key: "Publish your courses", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Resources
      /// 
      /// Locales: en
      static let resources = Rswift.StringResource(key: "Resources", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Saved in drafts
      /// 
      /// Locales: en
      static let savedInDrafts = Rswift.StringResource(key: "Saved in drafts", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Set up & Testing
      /// 
      /// Locales: en
      static let setUpTesting = Rswift.StringResource(key: "Set up & Testing", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en
      static let settings = Rswift.StringResource(key: "Settings", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign out
      /// 
      /// Locales: en
      static let signOut = Rswift.StringResource(key: "Sign out", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of use
      /// 
      /// Locales: en
      static let termsOfUse = Rswift.StringResource(key: "Terms of use", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: These courses are pending for approval from admin side
      /// 
      /// Locales: en
      static let pendingDesc = Rswift.StringResource(key: "PendingDesc", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Tools
      /// 
      /// Locales: en
      static let tools = Rswift.StringResource(key: "Tools", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Username
      /// 
      /// Locales: en
      static let username = Rswift.StringResource(key: "Username", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: View profile details,settings and manage your payments
      /// 
      /// Locales: en
      static let userDesc = Rswift.StringResource(key: "UserDesc", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: View the privacy policy
      /// 
      /// Locales: en
      static let viewThePrivacyPolicy = Rswift.StringResource(key: "View the privacy policy", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: View the terms of usage
      /// 
      /// Locales: en
      static let viewTheTermsOfUsage = Rswift.StringResource(key: "View the terms of usage", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: View your upcoming live schedule
      /// 
      /// Locales: en
      static let viewYourUpcomingLiveSchedule = Rswift.StringResource(key: "View your upcoming live schedule", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: What are the learning objectives of your course
      /// 
      /// Locales: en
      static let learningObjectives = Rswift.StringResource(key: "learning objectives", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: What kind of prior teaching experience do you have?
      /// 
      /// Locales: en
      static let categoryQuestion = Rswift.StringResource(key: "Category Question", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Who are your target students?
      /// 
      /// Locales: en
      static let targetStudents = Rswift.StringResource(key: "target students?", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Who is a suitable audience for your course?
      /// 
      /// Locales: en
      static let suitableaudience = Rswift.StringResource(key: "suitableaudience", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Why Do You Need To Join An Affiliate Marketing Network
      /// 
      /// Locales: en
      static let courseDesc = Rswift.StringResource(key: "Course Desc", tableName: "LocalizedStrings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Add subtitles
      /// 
      /// Locales: en
      static func addSubtitles(_: Void = ()) -> String {
        return NSLocalizedString("Add subtitles", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: All courses
      /// 
      /// Locales: en
      static func allCourses(_: Void = ()) -> String {
        return NSLocalizedString("All courses", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Approved
      /// 
      /// Locales: en
      static func approved(_: Void = ()) -> String {
        return NSLocalizedString("Approved", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Arabic
      /// 
      /// Locales: en
      static func arabic(_: Void = ()) -> String {
        return NSLocalizedString("Arabic", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are there any course requirements or prerequisites?
      /// 
      /// Locales: en
      static func courseRequirements(_: Void = ()) -> String {
        return NSLocalizedString("course requirements", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Become an instructor
      /// 
      /// Locales: en
      static func becomeAnInstructor(_: Void = ()) -> String {
        return NSLocalizedString("Become an instructor", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Become an instructor and earn
      /// 
      /// Locales: en
      static func becomeAnInstructorAndEarn(_: Void = ()) -> String {
        return NSLocalizedString("Become an instructor and earn", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Book your calender
      /// 
      /// Locales: en
      static func bookYourCalender(_: Void = ()) -> String {
        return NSLocalizedString("Book your calender", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Build Your Audience
      /// 
      /// Locales: en
      static func courseTitle3(_: Void = ()) -> String {
        return NSLocalizedString("Course Title3", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CREATE COURSE
      /// 
      /// Locales: en
      static func courseButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Course ButtonTitle", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Change language
      /// 
      /// Locales: en
      static func changeLanguage(_: Void = ()) -> String {
        return NSLocalizedString("Change language", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Checkout all the courses you have created
      /// 
      /// Locales: en
      static func allcoursesDesc(_: Void = ()) -> String {
        return NSLocalizedString("AllcoursesDesc", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Classroom
      /// 
      /// Locales: en
      static func option1(_: Void = ()) -> String {
        return NSLocalizedString("Option1", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Communication
      /// 
      /// Locales: en
      static func communication(_: Void = ()) -> String {
        return NSLocalizedString("Communication", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Complete the course details to make them online
      /// 
      /// Locales: en
      static func draftsDesc(_: Void = ()) -> String {
        return NSLocalizedString("DraftsDesc", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Course
      /// 
      /// Locales: en
      static func course(_: Void = ()) -> String {
        return NSLocalizedString("Course", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Course Language
      /// 
      /// Locales: en
      static func courseLanguage(_: Void = ()) -> String {
        return NSLocalizedString("Course Language", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Course Messages
      /// 
      /// Locales: en
      static func courseMessages(_: Void = ()) -> String {
        return NSLocalizedString("Course Messages", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Course Preview
      /// 
      /// Locales: en
      static func coursePreview(_: Void = ()) -> String {
        return NSLocalizedString("Course Preview", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Course Type
      /// 
      /// Locales: en
      static func courseType(_: Void = ()) -> String {
        return NSLocalizedString("Course Type", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Course catergory
      /// 
      /// Locales: en
      static func courseCatergory(_: Void = ()) -> String {
        return NSLocalizedString("Course catergory", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Course detail
      /// 
      /// Locales: en
      static func courseDetail(_: Void = ()) -> String {
        return NSLocalizedString("Course detail", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Course details
      /// 
      /// Locales: en
      static func courseDetails(_: Void = ()) -> String {
        return NSLocalizedString("Course details", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Course objective and requirments
      /// 
      /// Locales: en
      static func courseObjectiveAndRequirments(_: Void = ()) -> String {
        return NSLocalizedString("Course objective and requirments", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Course structure
      /// 
      /// Locales: en
      static func courseStructure(_: Void = ()) -> String {
        return NSLocalizedString("Course structure", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Course sub catergory
      /// 
      /// Locales: en
      static func courseSubCatergory(_: Void = ()) -> String {
        return NSLocalizedString("Course sub catergory", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Courses title
      /// 
      /// Locales: en
      static func coursesTitle(_: Void = ()) -> String {
        return NSLocalizedString("Courses title", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create Curriculum
      /// 
      /// Locales: en
      static func createCurriculum(_: Void = ()) -> String {
        return NSLocalizedString("Create Curriculum", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create a course
      /// 
      /// Locales: en
      static func createACourse(_: Void = ()) -> String {
        return NSLocalizedString("Create a course", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create an Engaging Course
      /// 
      /// Locales: en
      static func courseTitle2(_: Void = ()) -> String {
        return NSLocalizedString("Course Title2", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create your content
      /// 
      /// Locales: en
      static func createYourContent(_: Void = ()) -> String {
        return NSLocalizedString("Create your content", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Earn money while teaching what you love to do in simple and easy steps
      /// 
      /// Locales: en
      static func createCourseDesc(_: Void = ()) -> String {
        return NSLocalizedString("CreateCourseDesc", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: English
      /// 
      /// Locales: en
      static func english(_: Void = ()) -> String {
        return NSLocalizedString("English", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Example: Be able to…..
      /// 
      /// Locales: en
      static func objectivePlaceholder2(_: Void = ()) -> String {
        return NSLocalizedString("ObjectivePlaceholder2", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: GET STARTED
      /// 
      /// Locales: en
      static func getstarteD(_: Void = ()) -> String {
        return NSLocalizedString("GET STARTED", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: How much of a video 'pro' are you?
      /// 
      /// Locales: en
      static func videoQuestion(_: Void = ()) -> String {
        return NSLocalizedString("Video Question", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I have some knowledge
      /// 
      /// Locales: en
      static func videoOption2(_: Void = ()) -> String {
        return NSLocalizedString("VideoOption2", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I have video ready to upload
      /// 
      /// Locales: en
      static func videoOption4(_: Void = ()) -> String {
        return NSLocalizedString("VideoOption4", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I'm beginner
      /// 
      /// Locales: en
      static func videoOption1(_: Void = ()) -> String {
        return NSLocalizedString("VideoOption1", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I'm experienced
      /// 
      /// Locales: en
      static func videoOption3(_: Void = ()) -> String {
        return NSLocalizedString("VideoOption3", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Join the Newcomer Challenge!
      /// 
      /// Locales: en
      static func courseTitle4(_: Void = ()) -> String {
        return NSLocalizedString("Course Title4", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Jump Into Course Creation
      /// 
      /// Locales: en
      static func courseTitle1(_: Void = ()) -> String {
        return NSLocalizedString("Course Title1", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Library
      /// 
      /// Locales: en
      static func library(_: Void = ()) -> String {
        return NSLocalizedString("Library", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Little or no prior experience
      /// 
      /// Locales: en
      static func option3(_: Void = ()) -> String {
        return NSLocalizedString("Option3", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Logout of your account
      /// 
      /// Locales: en
      static func logoutOfYourAccount(_: Void = ()) -> String {
        return NSLocalizedString("Logout of your account", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Manage your account
      /// 
      /// Locales: en
      static func manageYourAccount(_: Void = ()) -> String {
        return NSLocalizedString("Manage your account", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Calander
      /// 
      /// Locales: en
      static func myCalander(_: Void = ()) -> String {
        return NSLocalizedString("My Calander", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Online
      /// 
      /// Locales: en
      static func option2(_: Void = ()) -> String {
        return NSLocalizedString("Option2", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Other
      /// 
      /// Locales: en
      static func option4(_: Void = ()) -> String {
        return NSLocalizedString("Option4", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pending for approval
      /// 
      /// Locales: en
      static func pendingForApproval(_: Void = ()) -> String {
        return NSLocalizedString("Pending for approval", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Performance
      /// 
      /// Locales: en
      static func performance(_: Void = ()) -> String {
        return NSLocalizedString("Performance", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Plan your courses
      /// 
      /// Locales: en
      static func planYourCourses(_: Void = ()) -> String {
        return NSLocalizedString("Plan your courses", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please add..
      /// 
      /// Locales: en
      static func objectivePlaceholder1(_: Void = ()) -> String {
        return NSLocalizedString("ObjectivePlaceholder1", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pricing
      /// 
      /// Locales: en
      static func pricing(_: Void = ()) -> String {
        return NSLocalizedString("Pricing", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Privacy Policy
      /// 
      /// Locales: en
      static func privacyPolicy(_: Void = ()) -> String {
        return NSLocalizedString("Privacy Policy", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Promotions
      /// 
      /// Locales: en
      static func promotions(_: Void = ()) -> String {
        return NSLocalizedString("Promotions", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Publish your courses
      /// 
      /// Locales: en
      static func publishYourCourses(_: Void = ()) -> String {
        return NSLocalizedString("Publish your courses", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Resources
      /// 
      /// Locales: en
      static func resources(_: Void = ()) -> String {
        return NSLocalizedString("Resources", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Saved in drafts
      /// 
      /// Locales: en
      static func savedInDrafts(_: Void = ()) -> String {
        return NSLocalizedString("Saved in drafts", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Set up & Testing
      /// 
      /// Locales: en
      static func setUpTesting(_: Void = ()) -> String {
        return NSLocalizedString("Set up & Testing", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en
      static func settings(_: Void = ()) -> String {
        return NSLocalizedString("Settings", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign out
      /// 
      /// Locales: en
      static func signOut(_: Void = ()) -> String {
        return NSLocalizedString("Sign out", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Terms of use
      /// 
      /// Locales: en
      static func termsOfUse(_: Void = ()) -> String {
        return NSLocalizedString("Terms of use", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: These courses are pending for approval from admin side
      /// 
      /// Locales: en
      static func pendingDesc(_: Void = ()) -> String {
        return NSLocalizedString("PendingDesc", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tools
      /// 
      /// Locales: en
      static func tools(_: Void = ()) -> String {
        return NSLocalizedString("Tools", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Username
      /// 
      /// Locales: en
      static func username(_: Void = ()) -> String {
        return NSLocalizedString("Username", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View profile details,settings and manage your payments
      /// 
      /// Locales: en
      static func userDesc(_: Void = ()) -> String {
        return NSLocalizedString("UserDesc", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View the privacy policy
      /// 
      /// Locales: en
      static func viewThePrivacyPolicy(_: Void = ()) -> String {
        return NSLocalizedString("View the privacy policy", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View the terms of usage
      /// 
      /// Locales: en
      static func viewTheTermsOfUsage(_: Void = ()) -> String {
        return NSLocalizedString("View the terms of usage", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View your upcoming live schedule
      /// 
      /// Locales: en
      static func viewYourUpcomingLiveSchedule(_: Void = ()) -> String {
        return NSLocalizedString("View your upcoming live schedule", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: What are the learning objectives of your course
      /// 
      /// Locales: en
      static func learningObjectives(_: Void = ()) -> String {
        return NSLocalizedString("learning objectives", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: What kind of prior teaching experience do you have?
      /// 
      /// Locales: en
      static func categoryQuestion(_: Void = ()) -> String {
        return NSLocalizedString("Category Question", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Who are your target students?
      /// 
      /// Locales: en
      static func targetStudents(_: Void = ()) -> String {
        return NSLocalizedString("target students?", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Who is a suitable audience for your course?
      /// 
      /// Locales: en
      static func suitableaudience(_: Void = ()) -> String {
        return NSLocalizedString("suitableaudience", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Why Do You Need To Join An Affiliate Marketing Network
      /// 
      /// Locales: en
      static func courseDesc(_: Void = ()) -> String {
        return NSLocalizedString("Course Desc", tableName: "LocalizedStrings", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.photoLibraryServices` struct is generated, and contains static references to 7 localization keys.
    struct photoLibraryServices {
      /// ar translation: ALL FAVORITES
      /// 
      /// Locales: ar, en, es, es-419
      static let all_FAVORITES = Rswift.StringResource(key: "ALL_FAVORITES", tableName: "PhotoLibraryServices", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: ALL PHOTOS
      /// 
      /// Locales: ar, en, es, es-419
      static let all_PHOTOS = Rswift.StringResource(key: "ALL_PHOTOS", tableName: "PhotoLibraryServices", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: ALL VIDEOS
      /// 
      /// Locales: ar, en, es, es-419
      static let all_VIDEOS = Rswift.StringResource(key: "ALL_VIDEOS", tableName: "PhotoLibraryServices", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Camera roll
      /// 
      /// Locales: ar, en, es, es-419
      static let camera_ROLL = Rswift.StringResource(key: "CAMERA_ROLL", tableName: "PhotoLibraryServices", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: MOMENT
      /// 
      /// Locales: ar, en, es, es-419
      static let moment_TITLE_PREFIX_FORMAT = Rswift.StringResource(key: "MOMENT_TITLE_PREFIX_FORMAT", tableName: "PhotoLibraryServices", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Photos
      /// 
      /// Locales: ar, en, es, es-419
      static let photoS = Rswift.StringResource(key: "PHOTOS", tableName: "PhotoLibraryServices", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Screenshots
      /// 
      /// Locales: ar, en, es, es-419
      static let all_SCREENSHOTS = Rswift.StringResource(key: "ALL_SCREENSHOTS", tableName: "PhotoLibraryServices", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      
      /// ar translation: ALL FAVORITES
      /// 
      /// Locales: ar, en, es, es-419
      static func all_FAVORITES(_: Void = ()) -> String {
        return NSLocalizedString("ALL_FAVORITES", tableName: "PhotoLibraryServices", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: ALL PHOTOS
      /// 
      /// Locales: ar, en, es, es-419
      static func all_PHOTOS(_: Void = ()) -> String {
        return NSLocalizedString("ALL_PHOTOS", tableName: "PhotoLibraryServices", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: ALL VIDEOS
      /// 
      /// Locales: ar, en, es, es-419
      static func all_VIDEOS(_: Void = ()) -> String {
        return NSLocalizedString("ALL_VIDEOS", tableName: "PhotoLibraryServices", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Camera roll
      /// 
      /// Locales: ar, en, es, es-419
      static func camera_ROLL(_: Void = ()) -> String {
        return NSLocalizedString("CAMERA_ROLL", tableName: "PhotoLibraryServices", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: MOMENT
      /// 
      /// Locales: ar, en, es, es-419
      static func moment_TITLE_PREFIX_FORMAT(_: Void = ()) -> String {
        return NSLocalizedString("MOMENT_TITLE_PREFIX_FORMAT", tableName: "PhotoLibraryServices", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Photos
      /// 
      /// Locales: ar, en, es, es-419
      static func photoS(_: Void = ()) -> String {
        return NSLocalizedString("PHOTOS", tableName: "PhotoLibraryServices", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Screenshots
      /// 
      /// Locales: ar, en, es, es-419
      static func all_SCREENSHOTS(_: Void = ()) -> String {
        return NSLocalizedString("ALL_SCREENSHOTS", tableName: "PhotoLibraryServices", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.photoLibrary` struct is generated, and contains static references to 16 localization keys.
    struct photoLibrary {
      /// ar translation: %@ Photos
      /// 
      /// Locales: ar, en, es, es-419
      static let album_IMAGE_COUNT_FORMAT = Rswift.StringResource(key: "ALBUM_IMAGE_COUNT_FORMAT", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: %@ Videos
      /// 
      /// Locales: ar, en, es, es-419
      static let album_VIDEO_COUNT_FORMAT = Rswift.StringResource(key: "ALBUM_VIDEO_COUNT_FORMAT", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: %@, %@
      /// 
      /// Locales: ar, en, es, es-419
      static let album_TWO_TYPES_LABEL_COMMAS = Rswift.StringResource(key: "ALBUM_TWO_TYPES_LABEL_COMMAS", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: 1 Photo
      /// 
      /// Locales: ar, en, es, es-419
      static let _ALBUM_PHOTO = Rswift.StringResource(key: "1_ALBUM_PHOTO", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: 1 Video
      /// 
      /// Locales: ar, en, es, es-419
      static let _ALBUM_VIDEO = Rswift.StringResource(key: "1_ALBUM_VIDEO", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: ALL FAVORITIES
      /// 
      /// Locales: ar, en, es, es-419
      static let all_FAVORITES = Rswift.StringResource(key: "ALL_FAVORITES", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: CANCEL
      /// 
      /// Locales: ar, en, es, es-419
      static let canceL = Rswift.StringResource(key: "CANCEL", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: CHOOSE
      /// 
      /// Locales: ar, en, es, es-419
      static let choose_PHOTO_BUTTON = Rswift.StringResource(key: "CHOOSE_PHOTO_BUTTON", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: From %@
      /// 
      /// Locales: ar, en, es, es-419
      static let stream_SHARED_BY_SUBTITLE = Rswift.StringResource(key: "STREAM_SHARED_BY_SUBTITLE", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: From You
      /// 
      /// Locales: ar, en, es, es-419
      static let stream_SHARED_BY_ME_SUBTITLE = Rswift.StringResource(key: "STREAM_SHARED_BY_ME_SUBTITLE", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: MOMENT
      /// 
      /// Locales: ar, en, es, es-419
      static let moment_TITLE_PREFIX_FORMAT = Rswift.StringResource(key: "MOMENT_TITLE_PREFIX_FORMAT", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Please select a smaller clip from this Video
      /// 
      /// Locales: ar, en, es, es-419
      static let video_TOO_LONG_BODY = Rswift.StringResource(key: "VIDEO_TOO_LONG_BODY", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: RETAKE
      /// 
      /// Locales: ar, en, es, es-419
      static let retakE = Rswift.StringResource(key: "RETAKE", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: USE PHOTO
      /// 
      /// Locales: ar, en, es, es-419
      static let use_PHOTO = Rswift.StringResource(key: "USE_PHOTO", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: USE VIDEO
      /// 
      /// Locales: ar, en, es, es-419
      static let use_VIDEO = Rswift.StringResource(key: "USE_VIDEO", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Video Too Long to Send
      /// 
      /// Locales: ar, en, es, es-419
      static let video_TOO_LONG_TITLE = Rswift.StringResource(key: "VIDEO_TOO_LONG_TITLE", tableName: "PhotoLibrary", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      
      /// ar translation: %@ Photos
      /// 
      /// Locales: ar, en, es, es-419
      static func album_IMAGE_COUNT_FORMAT(_ value1: String) -> String {
        return String(format: NSLocalizedString("ALBUM_IMAGE_COUNT_FORMAT", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@ Videos
      /// 
      /// Locales: ar, en, es, es-419
      static func album_VIDEO_COUNT_FORMAT(_ value1: String) -> String {
        return String(format: NSLocalizedString("ALBUM_VIDEO_COUNT_FORMAT", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: %@, %@
      /// 
      /// Locales: ar, en, es, es-419
      static func album_TWO_TYPES_LABEL_COMMAS(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("ALBUM_TWO_TYPES_LABEL_COMMAS", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// ar translation: 1 Photo
      /// 
      /// Locales: ar, en, es, es-419
      static func _ALBUM_PHOTO(_: Void = ()) -> String {
        return NSLocalizedString("1_ALBUM_PHOTO", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: 1 Video
      /// 
      /// Locales: ar, en, es, es-419
      static func _ALBUM_VIDEO(_: Void = ()) -> String {
        return NSLocalizedString("1_ALBUM_VIDEO", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: ALL FAVORITIES
      /// 
      /// Locales: ar, en, es, es-419
      static func all_FAVORITES(_: Void = ()) -> String {
        return NSLocalizedString("ALL_FAVORITES", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: CANCEL
      /// 
      /// Locales: ar, en, es, es-419
      static func canceL(_: Void = ()) -> String {
        return NSLocalizedString("CANCEL", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: CHOOSE
      /// 
      /// Locales: ar, en, es, es-419
      static func choose_PHOTO_BUTTON(_: Void = ()) -> String {
        return NSLocalizedString("CHOOSE_PHOTO_BUTTON", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: From %@
      /// 
      /// Locales: ar, en, es, es-419
      static func stream_SHARED_BY_SUBTITLE(_ value1: String) -> String {
        return String(format: NSLocalizedString("STREAM_SHARED_BY_SUBTITLE", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ar translation: From You
      /// 
      /// Locales: ar, en, es, es-419
      static func stream_SHARED_BY_ME_SUBTITLE(_: Void = ()) -> String {
        return NSLocalizedString("STREAM_SHARED_BY_ME_SUBTITLE", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: MOMENT
      /// 
      /// Locales: ar, en, es, es-419
      static func moment_TITLE_PREFIX_FORMAT(_: Void = ()) -> String {
        return NSLocalizedString("MOMENT_TITLE_PREFIX_FORMAT", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Please select a smaller clip from this Video
      /// 
      /// Locales: ar, en, es, es-419
      static func video_TOO_LONG_BODY(_: Void = ()) -> String {
        return NSLocalizedString("VIDEO_TOO_LONG_BODY", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: RETAKE
      /// 
      /// Locales: ar, en, es, es-419
      static func retakE(_: Void = ()) -> String {
        return NSLocalizedString("RETAKE", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: USE PHOTO
      /// 
      /// Locales: ar, en, es, es-419
      static func use_PHOTO(_: Void = ()) -> String {
        return NSLocalizedString("USE_PHOTO", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: USE VIDEO
      /// 
      /// Locales: ar, en, es, es-419
      static func use_VIDEO(_: Void = ()) -> String {
        return NSLocalizedString("USE_VIDEO", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Video Too Long to Send
      /// 
      /// Locales: ar, en, es, es-419
      static func video_TOO_LONG_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("VIDEO_TOO_LONG_TITLE", tableName: "PhotoLibrary", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.photosUI` struct is generated, and contains static references to 6 localization keys.
    struct photosUI {
      /// ar translation: MOMENT
      /// 
      /// Locales: ar, en, es, es-419
      static let moment_TITLE_PREFIX_FORMAT = Rswift.StringResource(key: "MOMENT_TITLE_PREFIX_FORMAT", tableName: "PhotosUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Moments
      /// 
      /// Locales: ar, en, es, es-419
      static let all_PHOTOS_IN_LIBRARY = Rswift.StringResource(key: "ALL_PHOTOS_IN_LIBRARY", tableName: "PhotosUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: Moments
      /// 
      /// Locales: ar, en, es, es-419
      static let full_PHOTOS_GRID_ZOOM_LEVEL_TITLE = Rswift.StringResource(key: "FULL_PHOTOS_GRID_ZOOM_LEVEL_TITLE", tableName: "PhotosUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: My Albums
      /// 
      /// Locales: ar, en, es, es-419
      static let pxUserCollectionsSectionTitle = Rswift.StringResource(key: "PXUserCollectionsSectionTitle", tableName: "PhotosUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: No Photos or Videos
      /// 
      /// Locales: ar, en, es, es-419
      static let no_PHOTOS_OR_VIDEOS = Rswift.StringResource(key: "NO_PHOTOS_OR_VIDEOS", tableName: "PhotosUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      /// ar translation: You can take photos and videos using camera, or sync photos and videos onto your iPhone using iTunes
      /// 
      /// Locales: ar, en, es, es-419
      static let empty_ALBUM_LIST_MESSAGE_iPhone = Rswift.StringResource(key: "EMPTY_ALBUM_LIST_MESSAGE_iPhone", tableName: "PhotosUI", bundle: R.hostingBundle, locales: ["ar", "en", "es", "es-419"], comment: nil)
      
      /// ar translation: MOMENT
      /// 
      /// Locales: ar, en, es, es-419
      static func moment_TITLE_PREFIX_FORMAT(_: Void = ()) -> String {
        return NSLocalizedString("MOMENT_TITLE_PREFIX_FORMAT", tableName: "PhotosUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Moments
      /// 
      /// Locales: ar, en, es, es-419
      static func all_PHOTOS_IN_LIBRARY(_: Void = ()) -> String {
        return NSLocalizedString("ALL_PHOTOS_IN_LIBRARY", tableName: "PhotosUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: Moments
      /// 
      /// Locales: ar, en, es, es-419
      static func full_PHOTOS_GRID_ZOOM_LEVEL_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("FULL_PHOTOS_GRID_ZOOM_LEVEL_TITLE", tableName: "PhotosUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: My Albums
      /// 
      /// Locales: ar, en, es, es-419
      static func pxUserCollectionsSectionTitle(_: Void = ()) -> String {
        return NSLocalizedString("PXUserCollectionsSectionTitle", tableName: "PhotosUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: No Photos or Videos
      /// 
      /// Locales: ar, en, es, es-419
      static func no_PHOTOS_OR_VIDEOS(_: Void = ()) -> String {
        return NSLocalizedString("NO_PHOTOS_OR_VIDEOS", tableName: "PhotosUI", bundle: R.hostingBundle, comment: "")
      }
      
      /// ar translation: You can take photos and videos using camera, or sync photos and videos onto your iPhone using iTunes
      /// 
      /// Locales: ar, en, es, es-419
      static func empty_ALBUM_LIST_MESSAGE_iPhone(_: Void = ()) -> String {
        return NSLocalizedString("EMPTY_ALBUM_LIST_MESSAGE_iPhone", tableName: "PhotosUI", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddAnswerReasonTableViewCell.validate()
      try _AnsTableCell.validate()
      try _CourseDetailTextViewCell.validate()
      try _ExploreCategoryCollectionViewCell.validate()
      try _ExploreCourseCollectionViewCell.validate()
      try _InstructorListingCollectionViewCell.validate()
      try _InstructorViewsCollectionViewCell.validate()
      try _MediaPickerCollectionViewCell.validate()
    }
    
    struct _AddAnswerReasonTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddAnswerReasonTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddAnswerReasonTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddAnswerReasonTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete' is used in nib 'AddAnswerReasonTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "colorBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorBorder' is used in storyboard 'AddAnswerReasonTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHeadings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadings' is used in storyboard 'AddAnswerReasonTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorPlaceHolder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorPlaceHolder' is used in storyboard 'AddAnswerReasonTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorText", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorText' is used in storyboard 'AddAnswerReasonTableViewCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _AddCurriculumTitleDescTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddCurriculumTitleDescTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddCurriculumTitleDescTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddCurriculumTitleDescTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _AddQuestionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddQuestionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddQuestionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddQuestionTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _AnsTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AnsTableCell
      
      let bundle = R.hostingBundle
      let identifier = "AnsTableCell"
      let name = "AnsTableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnsTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnsTableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_check_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_check_filled' is used in nib 'AnsTableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_check_unfilled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_check_unfilled' is used in nib 'AnsTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "colorScreenBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorScreenBg' is used in storyboard 'AnsTableCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorText", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorText' is used in storyboard 'AnsTableCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _BannerCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BannerCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "BannerCollectionViewCell"
      let name = "BannerCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BannerCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BannerCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _BannerView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BannerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _CourseDetailTextViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CourseDetailTextViewCell
      
      let bundle = R.hostingBundle
      let identifier = "CourseDetailTextViewCell"
      let name = "CourseDetailTextViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseDetailTextViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseDetailTextViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_link", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_link' is used in nib 'CourseDetailTextViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "colorScreenBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorScreenBg' is used in storyboard 'CourseDetailTextViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorText", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorText' is used in storyboard 'CourseDetailTextViewCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CourseObjectiveFooterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CourseObjectiveFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CourseObjectiveFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CourseObjectiveFooterView
      }
      
      fileprivate init() {}
    }
    
    struct _ExploreCategoryCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ExploreCategoryCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ExploreCategoryCollectionViewCell"
      let name = "ExploreCategoryCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExploreCategoryCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExploreCategoryCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_placeholdercategory", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_placeholdercategory' is used in nib 'ExploreCategoryCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "colorHeadings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadings' is used in storyboard 'ExploreCategoryCollectionViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHeadingsBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadingsBorder' is used in storyboard 'ExploreCategoryCollectionViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorPlaceHolder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorPlaceHolder' is used in storyboard 'ExploreCategoryCollectionViewCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ExploreCourseCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ExploreCourseCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ExploreCourseCollectionViewCell"
      let name = "ExploreCourseCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExploreCourseCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExploreCourseCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_course", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_course' is used in nib 'ExploreCourseCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_heart_outline", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_heart_outline' is used in nib 'ExploreCourseCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "colorHeadings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadings' is used in storyboard 'ExploreCourseCollectionViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorPlaceHolder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorPlaceHolder' is used in storyboard 'ExploreCourseCollectionViewCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _InstructorListingCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = InstructorListingCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "InstructorListingCollectionViewCell"
      let name = "InstructorListingCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InstructorListingCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InstructorListingCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_placeholder_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_placeholder_small' is used in nib 'InstructorListingCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "colorHeadings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadings' is used in storyboard 'InstructorListingCollectionViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHeadingsBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadingsBorder' is used in storyboard 'InstructorListingCollectionViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorPlaceHolder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorPlaceHolder' is used in storyboard 'InstructorListingCollectionViewCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _InstructorViewsCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = InstructorViewsCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "InstructorViewsCollectionViewCell"
      let name = "InstructorViewsCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InstructorViewsCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InstructorViewsCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_placeholder_small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_placeholder_small' is used in nib 'InstructorViewsCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "colorHeadings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadings' is used in storyboard 'InstructorViewsCollectionViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHeadingsBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadingsBorder' is used in storyboard 'InstructorViewsCollectionViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorPlaceHolder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorPlaceHolder' is used in storyboard 'InstructorViewsCollectionViewCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MediaPickerCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MediaPickerCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MediaPickerCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MediaPickerCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_pdf", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pdf' is used in nib 'MediaPickerCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "ColorCell", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ColorCell' is used in storyboard 'MediaPickerCollectionViewCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MediaPickerView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MediaPickerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _QuestTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = QuestTableCell
      
      let bundle = R.hostingBundle
      let identifier = "QuestTableCell"
      let name = "QuestTableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestTableCell
      }
      
      fileprivate init() {}
    }
    
    struct _TextViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TextViewCell
      
      let bundle = R.hostingBundle
      let identifier = "TextViewCell"
      let name = "TextViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TextViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try createCourse.validate()
      try curriculum.validate()
      try instructorDashboard.validate()
      try launchScreen.validate()
      try main.validate()
      try publishCourses.validate()
      try userDashBoard.validate()
    }
    
    struct createCourse: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let courseCreationVC = StoryboardViewControllerResource<CourseCreationVC>(identifier: "CourseCreationVC")
      let courseDetailsVC = StoryboardViewControllerResource<CourseDetailsVC>(identifier: "CourseDetailsVC")
      let courseObjectiveVC = StoryboardViewControllerResource<CourseObjectiveVC>(identifier: "CourseObjectiveVC")
      let courseStructureVC = StoryboardViewControllerResource<CourseStructureVC>(identifier: "CourseStructureVC")
      let courseTitleVC = StoryboardViewControllerResource<CourseTitleVC>(identifier: "CourseTitleVC")
      let instDashboardVC = StoryboardViewControllerResource<InstDashboardVC>(identifier: "InstDashboardVC")
      let name = "CreateCourse"
      let selectCourseCategoryVC = StoryboardViewControllerResource<SelectCourseCategoryVC>(identifier: "SelectCourseCategoryVC")
      let selectCourseTypeVC = StoryboardViewControllerResource<SelectCourseTypeVC>(identifier: "SelectCourseTypeVC")
      let submitCourseVC = StoryboardViewControllerResource<SubmitCourseVC>(identifier: "SubmitCourseVC")
      
      func courseCreationVC(_: Void = ()) -> CourseCreationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: courseCreationVC)
      }
      
      func courseDetailsVC(_: Void = ()) -> CourseDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: courseDetailsVC)
      }
      
      func courseObjectiveVC(_: Void = ()) -> CourseObjectiveVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: courseObjectiveVC)
      }
      
      func courseStructureVC(_: Void = ()) -> CourseStructureVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: courseStructureVC)
      }
      
      func courseTitleVC(_: Void = ()) -> CourseTitleVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: courseTitleVC)
      }
      
      func instDashboardVC(_: Void = ()) -> InstDashboardVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: instDashboardVC)
      }
      
      func selectCourseCategoryVC(_: Void = ()) -> SelectCourseCategoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectCourseCategoryVC)
      }
      
      func selectCourseTypeVC(_: Void = ()) -> SelectCourseTypeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectCourseTypeVC)
      }
      
      func submitCourseVC(_: Void = ()) -> SubmitCourseVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: submitCourseVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_btn_wt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_btn_wt' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_check' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_check_outline", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_check_outline' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_collaps_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_collaps_arrow' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_course_category", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_course_category' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_arrow' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_infographic_type", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_infographic_type' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_workingTitle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_workingTitle' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "colorCreateCourse", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorCreateCourse' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHeadings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadings' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorScreenBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorScreenBg' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorText", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorText' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorTheme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorTheme' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorThemeBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorThemeBorder' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorThemeHeadings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorThemeHeadings' is used in storyboard 'CreateCourse', but couldn't be loaded.") }
        }
        if _R.storyboard.createCourse().courseCreationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'courseCreationVC' could not be loaded from storyboard 'CreateCourse' as 'CourseCreationVC'.") }
        if _R.storyboard.createCourse().courseDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'courseDetailsVC' could not be loaded from storyboard 'CreateCourse' as 'CourseDetailsVC'.") }
        if _R.storyboard.createCourse().courseObjectiveVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'courseObjectiveVC' could not be loaded from storyboard 'CreateCourse' as 'CourseObjectiveVC'.") }
        if _R.storyboard.createCourse().courseStructureVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'courseStructureVC' could not be loaded from storyboard 'CreateCourse' as 'CourseStructureVC'.") }
        if _R.storyboard.createCourse().courseTitleVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'courseTitleVC' could not be loaded from storyboard 'CreateCourse' as 'CourseTitleVC'.") }
        if _R.storyboard.createCourse().instDashboardVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'instDashboardVC' could not be loaded from storyboard 'CreateCourse' as 'InstDashboardVC'.") }
        if _R.storyboard.createCourse().selectCourseCategoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectCourseCategoryVC' could not be loaded from storyboard 'CreateCourse' as 'SelectCourseCategoryVC'.") }
        if _R.storyboard.createCourse().selectCourseTypeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectCourseTypeVC' could not be loaded from storyboard 'CreateCourse' as 'SelectCourseTypeVC'.") }
        if _R.storyboard.createCourse().submitCourseVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'submitCourseVC' could not be loaded from storyboard 'CreateCourse' as 'SubmitCourseVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct curriculum: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "Curriculum"
      
      static func validate() throws {
        if UIKit.UIImage(named: "chevron left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chevron left' is used in storyboard 'Curriculum', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_audio_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_audio_off' is used in storyboard 'Curriculum', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_doc_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_doc_off' is used in storyboard 'Curriculum', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_doc_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_doc_on' is used in storyboard 'Curriculum', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radio_btn_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_btn_off' is used in storyboard 'Curriculum', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_slide_btn_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_slide_btn_off' is used in storyboard 'Curriculum', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_slide_btn_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_slide_btn_on' is used in storyboard 'Curriculum', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_video_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_video_off' is used in storyboard 'Curriculum', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_video_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_video_on' is used in storyboard 'Curriculum', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "colorCreateCourse", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorCreateCourse' is used in storyboard 'Curriculum', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHeadings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadings' is used in storyboard 'Curriculum', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHeadingsBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadingsBorder' is used in storyboard 'Curriculum', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorLink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLink' is used in storyboard 'Curriculum', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorPlaceHolder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorPlaceHolder' is used in storyboard 'Curriculum', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorScreenBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorScreenBg' is used in storyboard 'Curriculum', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorText", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorText' is used in storyboard 'Curriculum', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorTheme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorTheme' is used in storyboard 'Curriculum', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorThemeBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorThemeBorder' is used in storyboard 'Curriculum', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorThemeHeadings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorThemeHeadings' is used in storyboard 'Curriculum', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorViewBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorViewBg' is used in storyboard 'Curriculum', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct instructorDashboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let categoryQuestionsVC = StoryboardViewControllerResource<CategoryQuestionsVC>(identifier: "CategoryQuestionsVC")
      let instHomeVC = StoryboardViewControllerResource<InstHomeVC>(identifier: "InstHomeVC")
      let instProfileVC = StoryboardViewControllerResource<InstProfileVC>(identifier: "InstProfileVC")
      let name = "InstructorDashboard"
      let navBar = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "NavBar")
      let videoQuestionsVC = StoryboardViewControllerResource<VideoQuestionsVC>(identifier: "VideoQuestionsVC")
      
      func categoryQuestionsVC(_: Void = ()) -> CategoryQuestionsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: categoryQuestionsVC)
      }
      
      func instHomeVC(_: Void = ()) -> InstHomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: instHomeVC)
      }
      
      func instProfileVC(_: Void = ()) -> InstProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: instProfileVC)
      }
      
      func navBar(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: navBar)
      }
      
      func videoQuestionsVC(_: Void = ()) -> VideoQuestionsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: videoQuestionsVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_back_btn_wt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_btn_wt' is used in storyboard 'InstructorDashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_collaps_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_collaps_arrow' is used in storyboard 'InstructorDashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_arrow' is used in storyboard 'InstructorDashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next_blue' is used in storyboard 'InstructorDashboard', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "colorHeadings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadings' is used in storyboard 'InstructorDashboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorScreenBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorScreenBg' is used in storyboard 'InstructorDashboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorText", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorText' is used in storyboard 'InstructorDashboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorTheme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorTheme' is used in storyboard 'InstructorDashboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorThemeBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorThemeBorder' is used in storyboard 'InstructorDashboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorThemeHeadings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorThemeHeadings' is used in storyboard 'InstructorDashboard', but couldn't be loaded.") }
        }
        if _R.storyboard.instructorDashboard().categoryQuestionsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'categoryQuestionsVC' could not be loaded from storyboard 'InstructorDashboard' as 'CategoryQuestionsVC'.") }
        if _R.storyboard.instructorDashboard().instHomeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'instHomeVC' could not be loaded from storyboard 'InstructorDashboard' as 'InstHomeVC'.") }
        if _R.storyboard.instructorDashboard().instProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'instProfileVC' could not be loaded from storyboard 'InstructorDashboard' as 'InstProfileVC'.") }
        if _R.storyboard.instructorDashboard().navBar() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'navBar' could not be loaded from storyboard 'InstructorDashboard' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.instructorDashboard().videoQuestionsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'videoQuestionsVC' could not be loaded from storyboard 'InstructorDashboard' as 'VideoQuestionsVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationViewController
      
      let bundle = R.hostingBundle
      let forgotPasswordViewController = StoryboardViewControllerResource<ForgotPasswordViewController>(identifier: "ForgotPasswordViewController")
      let landingViewController = StoryboardViewControllerResource<LandingViewController>(identifier: "LandingViewController")
      let name = "Main"
      let navigationViewController = StoryboardViewControllerResource<NavigationViewController>(identifier: "NavigationViewController")
      let otpVerificationViewController = StoryboardViewControllerResource<OTPVerificationViewController>(identifier: "OTPVerificationViewController")
      let phoneNumberViewController = StoryboardViewControllerResource<PhoneNumberViewController>(identifier: "PhoneNumberViewController")
      let profileViewerViewController = StoryboardViewControllerResource<ProfileViewerViewController>(identifier: "ProfileViewerViewController")
      let signInViewController = StoryboardViewControllerResource<SignInViewController>(identifier: "SignInViewController")
      let signUpViewController = StoryboardViewControllerResource<SignUpViewController>(identifier: "SignUpViewController")
      
      func forgotPasswordViewController(_: Void = ()) -> ForgotPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordViewController)
      }
      
      func landingViewController(_: Void = ()) -> LandingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: landingViewController)
      }
      
      func navigationViewController(_: Void = ()) -> NavigationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: navigationViewController)
      }
      
      func otpVerificationViewController(_: Void = ()) -> OTPVerificationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otpVerificationViewController)
      }
      
      func phoneNumberViewController(_: Void = ()) -> PhoneNumberViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: phoneNumberViewController)
      }
      
      func profileViewerViewController(_: Void = ()) -> ProfileViewerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewerViewController)
      }
      
      func signInViewController(_: Void = ()) -> SignInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signInViewController)
      }
      
      func signUpViewController(_: Void = ()) -> SignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "chevron left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chevron left' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_camera_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera_placeholder' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chaked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chaked' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_check' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dd_small_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dd_small_blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_google' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_land_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_land_bg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_language_select", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_language_select' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_linkedin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_linkedin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo-dark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo-dark' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo_facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo_facebook' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_unchecked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_unchecked' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "colorBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorBorder' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHeadings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadings' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHeadingsBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadingsBorder' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorLink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLink' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorPlaceHolder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorPlaceHolder' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorScreenBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorScreenBg' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorTheme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorTheme' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorThemeBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorThemeBorder' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorThemeHeadings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorThemeHeadings' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorViewBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorViewBg' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().forgotPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordViewController' could not be loaded from storyboard 'Main' as 'ForgotPasswordViewController'.") }
        if _R.storyboard.main().landingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'landingViewController' could not be loaded from storyboard 'Main' as 'LandingViewController'.") }
        if _R.storyboard.main().navigationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'navigationViewController' could not be loaded from storyboard 'Main' as 'NavigationViewController'.") }
        if _R.storyboard.main().otpVerificationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otpVerificationViewController' could not be loaded from storyboard 'Main' as 'OTPVerificationViewController'.") }
        if _R.storyboard.main().phoneNumberViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'phoneNumberViewController' could not be loaded from storyboard 'Main' as 'PhoneNumberViewController'.") }
        if _R.storyboard.main().profileViewerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewerViewController' could not be loaded from storyboard 'Main' as 'ProfileViewerViewController'.") }
        if _R.storyboard.main().signInViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signInViewController' could not be loaded from storyboard 'Main' as 'SignInViewController'.") }
        if _R.storyboard.main().signUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'Main' as 'SignUpViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct publishCourses: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PublishCourses"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "colorScreenBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorScreenBg' is used in storyboard 'PublishCourses', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct userDashBoard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BecomeInstructorViewController
      
      let becomeInstructorViewController = StoryboardViewControllerResource<BecomeInstructorViewController>(identifier: "BecomeInstructorViewController")
      let bundle = R.hostingBundle
      let courseUserTabViewController = StoryboardViewControllerResource<CourseUserTabViewController>(identifier: "CourseUserTabViewController")
      let name = "UserDashBoard"
      let userCourseViewController = StoryboardViewControllerResource<UserCourseViewController>(identifier: "UserCourseViewController")
      let userExploreViewController = StoryboardViewControllerResource<UserExploreViewController>(identifier: "UserExploreViewController")
      let userProfileViewController = StoryboardViewControllerResource<UserProfileViewController>(identifier: "UserProfileViewController")
      let userSearchViewController = StoryboardViewControllerResource<UserSearchViewController>(identifier: "UserSearchViewController")
      let userWishListViewController = StoryboardViewControllerResource<UserWishListViewController>(identifier: "UserWishListViewController")
      
      func becomeInstructorViewController(_: Void = ()) -> BecomeInstructorViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: becomeInstructorViewController)
      }
      
      func courseUserTabViewController(_: Void = ()) -> CourseUserTabViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: courseUserTabViewController)
      }
      
      func userCourseViewController(_: Void = ()) -> UserCourseViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userCourseViewController)
      }
      
      func userExploreViewController(_: Void = ()) -> UserExploreViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userExploreViewController)
      }
      
      func userProfileViewController(_: Void = ()) -> UserProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userProfileViewController)
      }
      
      func userSearchViewController(_: Void = ()) -> UserSearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userSearchViewController)
      }
      
      func userWishListViewController(_: Void = ()) -> UserWishListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userWishListViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "chevron left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chevron left' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_explore_0", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_explore_0' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_explore_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_explore_1' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_golive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_golive' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_mycourse_0", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_mycourse_0' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_mycourse_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_mycourse_1' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_placeholder_large", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_placeholder_large' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_0", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profile_0' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profile_1' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profile_calendar' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_0", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_0' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_1' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user_create_course", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user_create_course' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_whislist_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_whislist_1' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_wishlist_0", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_wishlist_0' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "colorAppPrimary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorAppPrimary' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHeadings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadings' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHeadingsBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHeadingsBorder' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorLink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLink' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorPlaceHolder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorPlaceHolder' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorScreenBg1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorScreenBg1' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorTheme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorTheme' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorThemeBorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorThemeBorder' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorThemeHeadings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorThemeHeadings' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorViewBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorViewBg' is used in storyboard 'UserDashBoard', but couldn't be loaded.") }
        }
        if _R.storyboard.userDashBoard().becomeInstructorViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'becomeInstructorViewController' could not be loaded from storyboard 'UserDashBoard' as 'BecomeInstructorViewController'.") }
        if _R.storyboard.userDashBoard().courseUserTabViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'courseUserTabViewController' could not be loaded from storyboard 'UserDashBoard' as 'CourseUserTabViewController'.") }
        if _R.storyboard.userDashBoard().userCourseViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userCourseViewController' could not be loaded from storyboard 'UserDashBoard' as 'UserCourseViewController'.") }
        if _R.storyboard.userDashBoard().userExploreViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userExploreViewController' could not be loaded from storyboard 'UserDashBoard' as 'UserExploreViewController'.") }
        if _R.storyboard.userDashBoard().userProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userProfileViewController' could not be loaded from storyboard 'UserDashBoard' as 'UserProfileViewController'.") }
        if _R.storyboard.userDashBoard().userSearchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userSearchViewController' could not be loaded from storyboard 'UserDashBoard' as 'UserSearchViewController'.") }
        if _R.storyboard.userDashBoard().userWishListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userWishListViewController' could not be loaded from storyboard 'UserDashBoard' as 'UserWishListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
